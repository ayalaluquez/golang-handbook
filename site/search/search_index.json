{
    "docs": [
        {
            "location": "/", 
            "text": "The 'Go' Programming Handbook\n\n\nA Guide To Understanding The \n Go\n Programming Language.\n\n\n\n\n\n\nIntroduction\n\n\nThe 'Go' handbook is an introductory book and is intended for beginners, the book doesn't make any assumption about your prior programming knowledge and tries to teach everything from scratch.\n\n\nAudience\n\n\nThis handbook is intended for beginners and new programmers, it can also be used as a reference by more experienced developers.\n\n\nMotivation\n\n\nAs a beginner I really struggled to find the right sources for learning 'Go' and many of the resources very not suited for new beginner or for a student who is entirely new to programming, so I decided to write a simple to understand 'beginners' book for learning 'Go'\n\n\nAbout Me\n\n\nHi, my name is \n Anil Kulkarni\n and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of Golang. When I am not coding you can usually find me watching movies \n\n\nCode Sample\n\n\nAll code samples will the in the form of following block:\n    \nfunc\n \nmain\n()\n \n{\n\n    \nfmt\n.\nPrintln\n(\nHello, World!\n)\n\n\n}\n\n\n\n\nPatreon\n\n\nAll the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable.\n\n\nAny support is genuinely appreciated, you can help the activity by becoming a patreon by clicking on the below link:\n\n\n\n\nWork In Progress\n\n\nAs you can see, this is a work in progress, I intend to complete the basic \n partial intermediate write-up by end of Oct, 18.\n\n\nTo Do\n\n\nA lots have to be done yet, here is a small lists to things to do in near future\n\n\n\n\n Complete basic tutorial consisting of language syntax by end of Oct, 18.\n\n\n Add partial intermediate material by end of Oct, 18.\n\n\n Add at least basic tutorial videos by end of Oct, 2018.\n\n\n Create pdf downloadable version.\n\n\n\n\nGet In Touch\n\n\nTo know more about me please visit \nwww.octallium.com\n.\n\n\nThe website is currently \n offline\n and under development, will update on this page when it is launched.\n\n\nI am reachable at \n\n\nTwitter Handle\n@octallium\nThanks,\n\n\nAnil Kulkarni", 
            "title": "Introduction"
        }, 
        {
            "location": "/#the-go-programming-handbook", 
            "text": "A Guide To Understanding The   Go  Programming Language.", 
            "title": "The 'Go' Programming Handbook"
        }, 
        {
            "location": "/#introduction", 
            "text": "The 'Go' handbook is an introductory book and is intended for beginners, the book doesn't make any assumption about your prior programming knowledge and tries to teach everything from scratch.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#audience", 
            "text": "This handbook is intended for beginners and new programmers, it can also be used as a reference by more experienced developers.", 
            "title": "Audience"
        }, 
        {
            "location": "/#motivation", 
            "text": "As a beginner I really struggled to find the right sources for learning 'Go' and many of the resources very not suited for new beginner or for a student who is entirely new to programming, so I decided to write a simple to understand 'beginners' book for learning 'Go'", 
            "title": "Motivation"
        }, 
        {
            "location": "/#about-me", 
            "text": "Hi, my name is   Anil Kulkarni  and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of Golang. When I am not coding you can usually find me watching movies", 
            "title": "About Me"
        }, 
        {
            "location": "/#code-sample", 
            "text": "All code samples will the in the form of following block:\n     func   main ()   { \n     fmt . Println ( Hello, World! )  }", 
            "title": "Code Sample"
        }, 
        {
            "location": "/#patreon", 
            "text": "All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable.  Any support is genuinely appreciated, you can help the activity by becoming a patreon by clicking on the below link:", 
            "title": "Patreon"
        }, 
        {
            "location": "/#work-in-progress", 
            "text": "As you can see, this is a work in progress, I intend to complete the basic   partial intermediate write-up by end of Oct, 18.", 
            "title": "Work In Progress"
        }, 
        {
            "location": "/#to-do", 
            "text": "A lots have to be done yet, here is a small lists to things to do in near future    Complete basic tutorial consisting of language syntax by end of Oct, 18.   Add partial intermediate material by end of Oct, 18.   Add at least basic tutorial videos by end of Oct, 2018.   Create pdf downloadable version.", 
            "title": "To Do"
        }, 
        {
            "location": "/#get-in-touch", 
            "text": "To know more about me please visit  www.octallium.com .  The website is currently   offline  and under development, will update on this page when it is launched.  I am reachable at   Twitter Handle @octallium Thanks,  Anil Kulkarni", 
            "title": "Get In Touch"
        }, 
        {
            "location": "/getting-started/why-go/", 
            "text": "Why Go ?\n\n\n\n\n\nIts really an interesting question, why should you learn and use Go ? \n\n\nThis question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc.\n\n\nGo delivers some really exciting \n features\n such as:\n\n\n\n\n\n\nEasy and clear syntax.\n\n\n\n\n\n\nSmall language with big standard library.\n\n\n\n\n\n\nCompiled language and fast compilation.\n\n\n\n\n\n\nCan be easily used cross platform.\n\n\n\n\n\n\nIts incredibly fast.\n\n\n\n\n\n\nExcellent concurrency.\n\n\n\n\n\n\nGood community support.\n\n\n\n\n\n\nWhile other languages also provide some of the above mentioned benefits, but Go really excels at them all together.\n\n\nYou also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver.\n\n\nI will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.", 
            "title": "Why Go"
        }, 
        {
            "location": "/getting-started/why-go/#why-go", 
            "text": "Its really an interesting question, why should you learn and use Go ?   This question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc.  Go delivers some really exciting   features  such as:    Easy and clear syntax.    Small language with big standard library.    Compiled language and fast compilation.    Can be easily used cross platform.    Its incredibly fast.    Excellent concurrency.    Good community support.    While other languages also provide some of the above mentioned benefits, but Go really excels at them all together.  You also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver.  I will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.", 
            "title": "Why Go ?"
        }, 
        {
            "location": "/getting-started/installation/", 
            "text": "Installing Go\n\n\n\n\n\n How-To\n Install Go on your local machine\n\n\nInstalling on Mac OSx:\n\n\nInstalling on Mac OSx\nInstalling Go on your mac is pretty straight forward, choose any one method: -\nA) Installing using package installer directly from \ngolang.org\nOR\nB) Using Homebrew\nA) Installing using the package installer\nPackage installer method is the simplest way to get you started, just download the .pkg file by clicking on \nthis link\n and install it just as you would install any other program on your mac.\nThe installer will automatically create everything for you including setting up your environment variables.\nInstaller will automatically install it to\nusr/local/go directory\n\n\n\n\nAfter installing read \"Checking the installation\" section below to make sure everything works.\nB) Using Homebrew\nBefore using this method, make sure you have homebrew installed, if it is not installed checkout this \nlink\n and install it.\nOpen your terminal and type the following:\nbrew install go\n\n\n\n\nbrew will automatically fetch the latest binaries and install it for you, make sure they are installed to\nusr/local/go directory\n\n\n\n\nIts now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go.\nInstalling on FreeBSD \n Linux:\n\n\nInstalling on FreeBSD \n Linux\nDownload the archive from \ngolang.org\n and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following:\nIf you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command.\nOpen terminal in downloaded directory and type:\ntar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz\n\n\n\n\nAfter extracting set up GOPATH, refer the \"Setting up environment variables\" section.\nInstalling on Windows:\n\n\nInstalling on Windows\nDownload the msi installer from \ngolang.org\n and follow the prompts to intsall it.\nBy default it is installed in\nc:\\Go\n\n\n\n\nall the environmental variables are set automatically by the installer.\nIf you are using windows, I would highly recommend to install Git \n Git Bash.\nSetting up environment variables:\n\n\nSetting up environment variables\nIf you have installed Go using brew on OSx or on linux you need to set up GOPATH.\nA) If you are using bash, open and edit:\n~/.bash_profile\n\n\n\n\nB) If you are using zsh, open and edit:\n~/.zshrc\n\n\n\n\nand add the following:\nexport PATH=$PATH:/usr/local/go/bin\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport GOBIN=$HOME/go/bin\n\n\n\n\nsave the file and restart the terminal or type\nA) For bash:\nsource ~/.bash_profile\n\n\n\n\nB) For zsh:\nsource ~/.zshrc\n\n\n\n\nEditing .bash_profile or .zshrc\nFollow the instructions to edit .bash_profile or .zshrc, open the terminal and type\ncd\n\n\n\n\nIf you are using atom type\natom .bash_profile\n\n\n\n\nor\natom .zshrc\n\n\n\n\nChecking the installation:\n\n\nChecking the installation\nOpen the terminal and type:\necho $GOROOT\n\n\n\n\nit should give the output:\nusr/local/go\n\n\n\n\nFor windows it should give output:\nc:\\Go\n\n\n\n\nYou can also test using the following commands:\ngo env\ngo version", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/installation/#installing-go", 
            "text": "", 
            "title": "Installing Go"
        }, 
        {
            "location": "/getting-started/installation/#czjqqkd0-how-toczjqqkd1-install-go-on-your-local-machine", 
            "text": "", 
            "title": " How-To Install Go on your local machine"
        }, 
        {
            "location": "/getting-started/installation/#installing-on-mac-osx", 
            "text": "Installing on Mac OSx Installing Go on your mac is pretty straight forward, choose any one method: - A) Installing using package installer directly from  golang.org OR B) Using Homebrew A) Installing using the package installer Package installer method is the simplest way to get you started, just download the .pkg file by clicking on  this link  and install it just as you would install any other program on your mac. The installer will automatically create everything for you including setting up your environment variables. Installer will automatically install it to usr/local/go directory  After installing read \"Checking the installation\" section below to make sure everything works. B) Using Homebrew Before using this method, make sure you have homebrew installed, if it is not installed checkout this  link  and install it. Open your terminal and type the following: brew install go  brew will automatically fetch the latest binaries and install it for you, make sure they are installed to usr/local/go directory  Its now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go.", 
            "title": "Installing on Mac OSx:"
        }, 
        {
            "location": "/getting-started/installation/#installing-on-freebsd-linux", 
            "text": "Installing on FreeBSD   Linux Download the archive from  golang.org  and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following: If you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command. Open terminal in downloaded directory and type: tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz  After extracting set up GOPATH, refer the \"Setting up environment variables\" section.", 
            "title": "Installing on FreeBSD &amp; Linux:"
        }, 
        {
            "location": "/getting-started/installation/#installing-on-windows", 
            "text": "Installing on Windows Download the msi installer from  golang.org  and follow the prompts to intsall it. By default it is installed in c:\\Go  all the environmental variables are set automatically by the installer. If you are using windows, I would highly recommend to install Git   Git Bash.", 
            "title": "Installing on Windows:"
        }, 
        {
            "location": "/getting-started/installation/#setting-up-environment-variables", 
            "text": "Setting up environment variables If you have installed Go using brew on OSx or on linux you need to set up GOPATH. A) If you are using bash, open and edit: ~/.bash_profile  B) If you are using zsh, open and edit: ~/.zshrc  and add the following: export PATH=$PATH:/usr/local/go/bin\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport GOBIN=$HOME/go/bin  save the file and restart the terminal or type A) For bash: source ~/.bash_profile  B) For zsh: source ~/.zshrc  Editing .bash_profile or .zshrc Follow the instructions to edit .bash_profile or .zshrc, open the terminal and type cd  If you are using atom type atom .bash_profile  or atom .zshrc", 
            "title": "Setting up environment variables:"
        }, 
        {
            "location": "/getting-started/installation/#checking-the-installation", 
            "text": "Checking the installation Open the terminal and type: echo $GOROOT  it should give the output: usr/local/go  For windows it should give output: c:\\Go  You can also test using the following commands: go env\ngo version", 
            "title": "Checking the installation:"
        }, 
        {
            "location": "/getting-started/editor_ide/", 
            "text": "Setting Up Your Development Environment Using Text Editor's And IDE.\n\n\n\n\n\nThere are many choices available, both free and paid, while I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development.\n\n\nEditor's\n\n\n\n\nSublime Text\n\n\nAtom\n\n\nVisual Studio Code (Not to be confused with Visual Studio IDE)\n\n\nVim\n\n\n\n\nIDE\n\n\n\n\nGoland By Jetbrains (Paid)\n\n\nEclipse\n\n\n\n\nThis list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list \nhere\n\n\nI personally use \n Visual Studio Code\n, there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys.\n\n\nInstalling 'Go' Plugins\n\n\nJust downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development.\n\n\nPlugins\n\n\n\n\nVS Code - \nGo - By Microsoft\n\n\nAtom - \nGo Plus", 
            "title": "Editors and IDE"
        }, 
        {
            "location": "/getting-started/editor_ide/#setting-up-your-development-environment-using-text-editors-and-ide", 
            "text": "There are many choices available, both free and paid, while I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development.", 
            "title": "Setting Up Your Development Environment Using Text Editor's And IDE."
        }, 
        {
            "location": "/getting-started/editor_ide/#editors", 
            "text": "Sublime Text  Atom  Visual Studio Code (Not to be confused with Visual Studio IDE)  Vim", 
            "title": "Editor's"
        }, 
        {
            "location": "/getting-started/editor_ide/#ide", 
            "text": "Goland By Jetbrains (Paid)  Eclipse   This list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list  here  I personally use   Visual Studio Code , there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys.", 
            "title": "IDE"
        }, 
        {
            "location": "/getting-started/editor_ide/#installing-go-plugins", 
            "text": "Just downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development.  Plugins   VS Code -  Go - By Microsoft  Atom -  Go Plus", 
            "title": "Installing 'Go' Plugins"
        }, 
        {
            "location": "/basic/basic/", 
            "text": "Basic\n\n\n\n\n\nIn this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs.\n\n\nStart with the next section to write a \n \"Hello, World!\"\n program in Go.", 
            "title": "Basic Introduction"
        }, 
        {
            "location": "/basic/basic/#basic", 
            "text": "In this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs.  Start with the next section to write a   \"Hello, World!\"  program in Go.", 
            "title": "Basic"
        }, 
        {
            "location": "/basic/hello-world/", 
            "text": "Writing a \n \"Hello, World!\"\n program.\n\n\n\n\n\nObjective\n\n\nWrite a program which prints \"Hello, World!\" on the screen.\n\n\nStructure\n\n\nLet's create a folder called 'code' anywhere on your machine and we will put all our Go code in it.\n\n\ncode/\n\n\n\n\n\nFor our first program create a new folder '01_hello_world'\n\n\ncode/01_hello_world\n\n\n\n\n\nAnd lets create a file 'hello_world.go' in it, finally the structure would look like this:\n\n\ncode/01_hello_world/hello_world.go\n\n\n\n\n\nCode\n\n\nWrite the code as shown below, while you can simply copy and paste, its better if you write everything on your own. \n\n\nDon't worry if you code won't work, only then copy and paste the code \n\n\nHello World\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \nfunc\n \nmain\n()\n \n{\n\n\n6\n   \nfmt\n.\nPrintln\n(\nHello, World!\n)\n\n\n7\n \n}\n\n\n\n\nRunning your code\n\n\nOpen your terminal and navigate to our folder\n\n\ncode/01_hello_world/hello_world.go\n\n\n\n\n\nOnce in the folder type the following command\n\n\ngo run hello_world.go\n\n\n\n\n\nIf there are no errors, you should get the output as:\n\n\nOutput\nHello, World!\n\n\n\n\nIf for some reason your code isn't working, checkout the golang playground or github links in the following section.\n\n\nClick on the below link for \nGithub Repo\n\n\nGithub Repo\n\n\nThat's it, \n Congratulations\n ! You just wrote your first Go program.\n\n\nGolang Playground\n\n\nGolang has a online sandbox environment for running your Go programs, which can be accessed on \nGolang Playground\n\n\nI will be posting all the playground links for all the code we write, this way you can run them online and compare with your code.\n\n\nHello World On Playground\nClick on the below link:\nHello World\nNext\n\n\nIf you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet !\n\n\nIn the next section we will understand everything line-by-line.", 
            "title": "01 Hello World"
        }, 
        {
            "location": "/basic/hello-world/#writing-a-czjqqkd0-hello-worldczjqqkd1-program", 
            "text": "", 
            "title": "Writing a  \"Hello, World!\" program."
        }, 
        {
            "location": "/basic/hello-world/#objective", 
            "text": "Write a program which prints \"Hello, World!\" on the screen.", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/hello-world/#structure", 
            "text": "Let's create a folder called 'code' anywhere on your machine and we will put all our Go code in it.  code/  For our first program create a new folder '01_hello_world'  code/01_hello_world  And lets create a file 'hello_world.go' in it, finally the structure would look like this:  code/01_hello_world/hello_world.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/hello-world/#code", 
            "text": "Write the code as shown below, while you can simply copy and paste, its better if you write everything on your own.   Don't worry if you code won't work, only then copy and paste the code   Hello World 1   package   main  2  3   import   fmt  4  5   func   main ()   {  6     fmt . Println ( Hello, World! )  7   }", 
            "title": "Code"
        }, 
        {
            "location": "/basic/hello-world/#running-your-code", 
            "text": "Open your terminal and navigate to our folder  code/01_hello_world/hello_world.go  Once in the folder type the following command  go run hello_world.go  If there are no errors, you should get the output as:  Output Hello, World!  If for some reason your code isn't working, checkout the golang playground or github links in the following section.  Click on the below link for  Github Repo  Github Repo  That's it,   Congratulations  ! You just wrote your first Go program.", 
            "title": "Running your code"
        }, 
        {
            "location": "/basic/hello-world/#golang-playground", 
            "text": "Golang has a online sandbox environment for running your Go programs, which can be accessed on  Golang Playground  I will be posting all the playground links for all the code we write, this way you can run them online and compare with your code.  Hello World On Playground Click on the below link: Hello World", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/hello-world/#next", 
            "text": "If you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet !  In the next section we will understand everything line-by-line.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/hello-world-understand/", 
            "text": "Understanding \n \"Hello, World!\"\n Program.\n\n\n\n\n\nObjective\n\n\nUnderstanding the Hello World program line-by-line\n\n\nCode\n\n\nHello World\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \nfunc\n \nmain\n()\n \n{\n\n\n6\n   \nfmt\n.\nPrintln\n(\nHello, World!\n)\n\n\n7\n \n}\n\n\n\n\nCode Review\n\n\nNow its time to dive in and understand the code\n\n\nLine 1 - \n\n\npackage main\n\n\n\n\n\nDeclares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to \n Packages\n in future, for now remmember all files at your project directory level belong to package main.\n\n\nLine 3 -\n\n\nimport\n \nfmt\n\n\n\n\n\n\nHere we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\".\n\n\n\"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts.\n\n\nDocumentation for \"fmt\" can be found \nhere\n\n\n\"fmt\" exposes a lot of functionality to us which we use in the line 6.\n\n\nLine 5 - \n\n\nfunc main () {\n\n\n\n\n\nThis is the start or entry point for your code, the compiler will automatically check if \n func main()\n is present or not and start the program from there, it is generally mentioned as\n\n\nmain.main\n[package].[function]\n\n\n\n\n\nmeans \"main\" function in \"main\" package\n\n\nLine 6 - \n\n\nfmt.Println(\nHello, World!)\n\n\n\n\n\nHere we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen.\n\n\nNow, you can see how we can use functionality written in packages and use it for our ease.\n\n\nLine 7 - \n\n\n}\n\n\n\n\n\nCloses the main function, this symbolizes that main function ends here.\n\n\nAside\n\n\nWow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code.\n\n\nAs a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand.\n\n\nLearning code takes patience and persistance, fasten your seat belts and keep learning.", 
            "title": "02 Understanding Hello World"
        }, 
        {
            "location": "/basic/hello-world-understand/#understanding-czjqqkd0-hello-worldczjqqkd1-program", 
            "text": "", 
            "title": "Understanding  \"Hello, World!\" Program."
        }, 
        {
            "location": "/basic/hello-world-understand/#objective", 
            "text": "Understanding the Hello World program line-by-line", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/hello-world-understand/#code", 
            "text": "Hello World 1   package   main  2  3   import   fmt  4  5   func   main ()   {  6     fmt . Println ( Hello, World! )  7   }", 
            "title": "Code"
        }, 
        {
            "location": "/basic/hello-world-understand/#code-review", 
            "text": "Now its time to dive in and understand the code  Line 1 -   package main  Declares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to   Packages  in future, for now remmember all files at your project directory level belong to package main.  Line 3 -  import   fmt   Here we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\".  \"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts.  Documentation for \"fmt\" can be found  here  \"fmt\" exposes a lot of functionality to us which we use in the line 6.  Line 5 -   func main () {  This is the start or entry point for your code, the compiler will automatically check if   func main()  is present or not and start the program from there, it is generally mentioned as  main.main\n[package].[function]  means \"main\" function in \"main\" package  Line 6 -   fmt.Println( Hello, World!)  Here we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen.  Now, you can see how we can use functionality written in packages and use it for our ease.  Line 7 -   }  Closes the main function, this symbolizes that main function ends here.", 
            "title": "Code Review"
        }, 
        {
            "location": "/basic/hello-world-understand/#aside", 
            "text": "Wow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code.  As a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand.  Learning code takes patience and persistance, fasten your seat belts and keep learning.", 
            "title": "Aside"
        }
    ]
}