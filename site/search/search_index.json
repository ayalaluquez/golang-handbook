{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The 'Go' Programming Handbook \u00b6 A Guide To Understanding The Go Programming Language. Introduction \u00b6 The 'Go' handbook is an introductory book and is intended for beginners, the book doesn't make any assumption about your prior programming knowledge and tries to teach everything from scratch. Audience \u00b6 This handbook is intended for beginners and new programmers, it can also be used as a reference by more experienced developers. Motivation \u00b6 As a beginner I really struggled to find the right sources for learning 'Go' and many of the resources very not suited for new beginner or for a student who is entirely new to programming, so I decided to write a simple to understand 'beginners' book for learning 'Go' About Me \u00b6 Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of Golang. When I am not coding you can usually find me watching movies Code Sample \u00b6 All code samples will the in the form of following block: go func main() { fmt.Println(\"Hello, World!\") } Please Donate \u2764\ufe0f \u00b6 All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link: Work In Progress \u00b6 As you can see, this is a work in progress, I intend to complete the basic & partial intermediate write-up by end of Oct, 18. To Do \u00b6 A lots have to be done yet, here is a small lists to things to do in near future Complete basic tutorial consisting of language syntax by end of Oct, 18. Add partial intermediate material by end of Oct, 18. Add at least basic tutorial videos by end of Oct, 2018. Create pdf downloadable version. Create artwork for chapters. Get In Touch \u00b6 To know more about me please visit www.octallium.com . The website is currently offline and under development, will update on this page when it is launched. I am reachable at Twitter Handle @octallium Thanks, Anil Kulkarni","title":"Introduction"},{"location":"#the-go-programming-handbook","text":"A Guide To Understanding The Go Programming Language.","title":"The 'Go' Programming Handbook"},{"location":"#introduction","text":"The 'Go' handbook is an introductory book and is intended for beginners, the book doesn't make any assumption about your prior programming knowledge and tries to teach everything from scratch.","title":"Introduction"},{"location":"#audience","text":"This handbook is intended for beginners and new programmers, it can also be used as a reference by more experienced developers.","title":"Audience"},{"location":"#motivation","text":"As a beginner I really struggled to find the right sources for learning 'Go' and many of the resources very not suited for new beginner or for a student who is entirely new to programming, so I decided to write a simple to understand 'beginners' book for learning 'Go'","title":"Motivation"},{"location":"#about-me","text":"Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of Golang. When I am not coding you can usually find me watching movies","title":"About Me"},{"location":"#code-sample","text":"All code samples will the in the form of following block: go func main() { fmt.Println(\"Hello, World!\") }","title":"Code Sample"},{"location":"#please-donate","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Donate \u2764\ufe0f"},{"location":"#work-in-progress","text":"As you can see, this is a work in progress, I intend to complete the basic & partial intermediate write-up by end of Oct, 18.","title":"Work In Progress"},{"location":"#to-do","text":"A lots have to be done yet, here is a small lists to things to do in near future Complete basic tutorial consisting of language syntax by end of Oct, 18. Add partial intermediate material by end of Oct, 18. Add at least basic tutorial videos by end of Oct, 2018. Create pdf downloadable version. Create artwork for chapters.","title":"To Do"},{"location":"#get-in-touch","text":"To know more about me please visit www.octallium.com . The website is currently offline and under development, will update on this page when it is launched. I am reachable at Twitter Handle @octallium Thanks, Anil Kulkarni","title":"Get In Touch"},{"location":"basic/add-comment/","text":"How To Add A Comment . \u00b6 Objective \u00b6 Learn how to add a comment in the code. Requirement \u00b6 Adding comments is a very handy way of adding documentation to your code, it serves as a tool to let others know what you have written and makes navigating your code an easy task. Go has a specific format for adding comments and recommends adding comments wherever it makes sense. Code \u00b6 Adding a comment is pretty easy // This is a comment The compiler ignores the comment and runs your code, however as humans for us to remmember what we have written and for others to understand writing comments would make sense. Hello World With Comment \u00b6 Hello World 1 // Declaring that the file belongs to the main package 2 package main 3 4 // Importing the package \"fmt\" 5 import \"fmt\" 6 7 // Declaring the main function 8 func main () { 9 10 // Printing Hello World to the standard output 11 fmt . Println ( \"Hello, World!\" ) 12 } 13 // main function ends Golang Playground \u00b6 Hello World With Comment Click on the below link: Hello World With Comments Next \u00b6 Now that you know how to write comments, lets start with writing code with beautiful comments, but before we actually start writing more code there is one small step, we need to understand Data Types Click on the next section to understand basic data types in Go.","title":"03 Adding a Comment"},{"location":"basic/add-comment/#how-to-add-a-czjqqkd0-commentczjqqkd1","text":"","title":"How To Add A  Comment."},{"location":"basic/add-comment/#objective","text":"Learn how to add a comment in the code.","title":"Objective"},{"location":"basic/add-comment/#requirement","text":"Adding comments is a very handy way of adding documentation to your code, it serves as a tool to let others know what you have written and makes navigating your code an easy task. Go has a specific format for adding comments and recommends adding comments wherever it makes sense.","title":"Requirement"},{"location":"basic/add-comment/#code","text":"Adding a comment is pretty easy // This is a comment The compiler ignores the comment and runs your code, however as humans for us to remmember what we have written and for others to understand writing comments would make sense.","title":"Code"},{"location":"basic/add-comment/#hello-world-with-comment","text":"Hello World 1 // Declaring that the file belongs to the main package 2 package main 3 4 // Importing the package \"fmt\" 5 import \"fmt\" 6 7 // Declaring the main function 8 func main () { 9 10 // Printing Hello World to the standard output 11 fmt . Println ( \"Hello, World!\" ) 12 } 13 // main function ends","title":"Hello World With Comment"},{"location":"basic/add-comment/#golang-playground","text":"Hello World With Comment Click on the below link: Hello World With Comments","title":"Golang Playground"},{"location":"basic/add-comment/#next","text":"Now that you know how to write comments, lets start with writing code with beautiful comments, but before we actually start writing more code there is one small step, we need to understand Data Types Click on the next section to understand basic data types in Go.","title":"Next"},{"location":"basic/array/","text":"Understanding Data Structure of Type Array . \u00b6 Objective \u00b6 Understanding Array's in Go. Imagine walking into an ice-cream store, you see all different flavour displayed nicely side-by-side, tempting isn't it ? You can easily see all the flavours and make your choice easily. This display of various ice-cream flavours is nothing by an \"array\" with the common item type of \"ice-cream\" ! Go offers a couple of in-build data structures and one of them is an \"array\", you can imagine array as a collection of similar items, i.e you can group together common items. The advantage of array is that it gives you easy access to data, also data can be organized properly by using arrays, however arrays are fixed in size, to overcome this Go offers \"slice\" which we will cover in the next chapter. Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '11_array' code/basic/11_array/ And lets create a file 'array.go' in it, finally the structure would look like this: code/basic/11_array/array.go Declaration \u00b6 Syntax var arrayName[size] type Or declaration & initialization method arrayName := [size]type{value1, value2, ...} Code \u00b6 We will write the code in 2 parts: 1.) Part-1 array.go 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // declaring an array of type int 7 var array1 [ 5 ] int 8 fmt . Println ( \"The values of array1 are:\" , array1 ) 9 fmt . Println ( \"The length of array1 is:\" , len ( array1 )) 10 fmt . Println () 11 12 // adding values into the array 13 fmt . Println ( \"Adding values to array1\" ) 14 array1 [ 0 ] = 29 15 array1 [ 1 ] = 17 16 array1 [ 2 ] = 42 17 array1 [ 3 ] = 13 18 array1 [ 4 ] = 56 19 fmt . Println ( \"Now the values of array1 are:\" , array1 ) 20 fmt . Println () 21 22 // Reading all values from array1 using for-range loop 23 fmt . Println ( \"Reading all the values from array1 using for-range loop...\" ) 24 for index , value := range array1 { 25 fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) 26 } 27 fmt . Println () 28 Review On line 7 we declare an array of type int with a length of 5 and print out the empty array. var array1 [5]int On line 9 we print out the length of the array using a built-in function \"len\". fmt.Println(\"The length of array1 is:\", len(array1)) From line 14 to 18 we initialize values to the array and then finally print out the filled array. The final array will look like the below image. Did you notice that the index position starts from \"0\" and not from \"1\" ! So an array of length 5 will have index positions of 0, 1, 2, 3 & 4. On line 24 we are using a \"for-range\" loop to print out the values, notice that we declare two variables \"index\" and \"position\" and then range over the array. for index, value := range array1 What this does is, it iterates over each element one by one and prints out the value & index, we don't have to declare variables and iterate, remember we used to write: for i := 0 ; i & lt ; n ; i ++ { do something } Instead we can write it with much cleaner syntax using for-range loop, for-range loops are extensively used in Go. If you don't want to use any value, you can simply discard it using \"_\" , for example if you do not want index position, you can declare for-range as: for _, value : range array1 { do something } The underscore \"_\" simply tells the Go compiler to ignore the value. 2.) Part-2 array.go 29 // declaring an array of type string with shorthand method 30 cities := [ 5 ] string { \"New York\" , \"Seattle\" , \"Mumbai\" , \"Sydney\" , \"Montreal\" } 31 fmt . Println ( \"The values of cities array are:\" , cities ) 32 fmt . Println () 33 34 // Reading specific values 35 fmt . Println ( \"Reading values from cities array using index position...\" ) 36 fmt . Println ( \"The first city is:\" , cities [ 0 ]) 37 fmt . Println ( \"The 3rd city is:\" , cities [ 2 ]) 38 fmt . Println ( \"The last city is:\" , cities [ 4 ]) 39 fmt . Println ( \"The last city can also be found by:\" , cities [ len ( cities ) - 1 ]) 40 fmt . Println () 41 42 // changing values 43 fmt . Println ( \"Changing the value at cities[0] to Paris...\" ) 44 cities [ 0 ] = \"Paris\" 45 fmt . Println ( \"The value at cities[0] is:\" , cities [ 0 ]) 46 } Review On line 30 we declare and initialze the array at the same time cities := [5]string{\"New York\", \"Seattle\", \"Mumbai\", \"Sydney\", \"Montreal\"} We can access values at select index, checkout the lines from 36 to 39. fmt.Println(\"The first city is:\", cities[0]) fmt.Println(\"The 3rd city is:\", cities[2]) fmt.Println(\"The last city is:\", cities[4]) fmt.Println(\"The last city can also be found by:\", cities[len(cities)-1]) We can also change the values in an array, on line 44 we change the value of cities[0] from New York to Paris. cities[0] = \"Paris\" Full Code \u00b6 array.go package main import \"fmt\" func main () { // declaring an array of type int var array1 [ 5 ] int fmt . Println ( \"The values of array1 are:\" , array1 ) fmt . Println ( \"The length of array1 is:\" , len ( array1 )) fmt . Println () // adding values into the array fmt . Println ( \"Adding values to array1\" ) array1 [ 0 ] = 29 array1 [ 1 ] = 17 array1 [ 2 ] = 42 array1 [ 3 ] = 13 array1 [ 4 ] = 56 fmt . Println ( \"Now the values of array1 are:\" , array1 ) fmt . Println () // Reading all values from array1 using for-range loop fmt . Println ( \"Reading all the values from array1 using for-range loop...\" ) for index , value := range array1 { fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) } fmt . Println () // declaring an array of type string with shorthand method cities := [ 5 ] string { \"New York\" , \"Seattle\" , \"Mumbai\" , \"Sydney\" , \"Montreal\" } fmt . Println ( \"The values of cities array are:\" , cities ) fmt . Println () // Reading specific values fmt . Println ( \"Reading values from cities array using index position...\" ) fmt . Println ( \"The first city is:\" , cities [ 0 ]) fmt . Println ( \"The 3rd city is:\" , cities [ 2 ]) fmt . Println ( \"The last city is:\" , cities [ 4 ]) fmt . Println ( \"The last city can also be found by:\" , cities [ len ( cities ) - 1 ]) fmt . Println () // changing values fmt . Println ( \"Changing the value at cities[0] to Paris...\" ) cities [ 0 ] = \"Paris\" fmt . Println ( \"The value at cities[0] is:\" , cities [ 0 ]) } Running your code \u00b6 Open your terminal and navigate to our folder code/basic/11_array/ Once in the folder type the following command go run array.go If there are no errors, you should get the output as: Output The values of array1 are: [0 0 0 0 0] The length of array1 is: 5 Adding values to array1 Now the values of array1 are: [29 17 42 13 56] Reading all the values from array1 using for-range loop... Index: 0 Value: 29 Index: 1 Value: 17 Index: 2 Value: 42 Index: 3 Value: 13 Index: 4 Value: 56 The values of cities array are: [New York Seattle Mumbai Sydney Montreal] Reading values from cities array using index position... The first city is: New York The 3rd city is: Mumbai The last city is: Montreal The last city can also be found by: Montreal Changing the value at cities[0] to Paris... The value at cities[0] is: Paris If for some reason your code isn't working, checkout the github repo. Github \u00b6 Github Repo Golang Playground \u00b6 Golang Playground Limitation \u00b6 Imagine you data is increasing and now you have 100 cities instead of 5, but the array can only hold 5 values, to overcome this limitation Go ships with a flexible type called as \"Slice\". Next \u00b6 We will study slices in depth in the next chapter.","title":"11 Array"},{"location":"basic/array/#understanding-data-structure-of-type-czjqqkd0-arrayczjqqkd1","text":"","title":"Understanding Data Structure of Type  Array."},{"location":"basic/array/#objective","text":"Understanding Array's in Go. Imagine walking into an ice-cream store, you see all different flavour displayed nicely side-by-side, tempting isn't it ? You can easily see all the flavours and make your choice easily. This display of various ice-cream flavours is nothing by an \"array\" with the common item type of \"ice-cream\" ! Go offers a couple of in-build data structures and one of them is an \"array\", you can imagine array as a collection of similar items, i.e you can group together common items. The advantage of array is that it gives you easy access to data, also data can be organized properly by using arrays, however arrays are fixed in size, to overcome this Go offers \"slice\" which we will cover in the next chapter.","title":"Objective"},{"location":"basic/array/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '11_array' code/basic/11_array/ And lets create a file 'array.go' in it, finally the structure would look like this: code/basic/11_array/array.go","title":"Structure"},{"location":"basic/array/#declaration","text":"Syntax var arrayName[size] type Or declaration & initialization method arrayName := [size]type{value1, value2, ...}","title":"Declaration"},{"location":"basic/array/#code","text":"We will write the code in 2 parts: 1.) Part-1 array.go 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // declaring an array of type int 7 var array1 [ 5 ] int 8 fmt . Println ( \"The values of array1 are:\" , array1 ) 9 fmt . Println ( \"The length of array1 is:\" , len ( array1 )) 10 fmt . Println () 11 12 // adding values into the array 13 fmt . Println ( \"Adding values to array1\" ) 14 array1 [ 0 ] = 29 15 array1 [ 1 ] = 17 16 array1 [ 2 ] = 42 17 array1 [ 3 ] = 13 18 array1 [ 4 ] = 56 19 fmt . Println ( \"Now the values of array1 are:\" , array1 ) 20 fmt . Println () 21 22 // Reading all values from array1 using for-range loop 23 fmt . Println ( \"Reading all the values from array1 using for-range loop...\" ) 24 for index , value := range array1 { 25 fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) 26 } 27 fmt . Println () 28 Review On line 7 we declare an array of type int with a length of 5 and print out the empty array. var array1 [5]int On line 9 we print out the length of the array using a built-in function \"len\". fmt.Println(\"The length of array1 is:\", len(array1)) From line 14 to 18 we initialize values to the array and then finally print out the filled array. The final array will look like the below image. Did you notice that the index position starts from \"0\" and not from \"1\" ! So an array of length 5 will have index positions of 0, 1, 2, 3 & 4. On line 24 we are using a \"for-range\" loop to print out the values, notice that we declare two variables \"index\" and \"position\" and then range over the array. for index, value := range array1 What this does is, it iterates over each element one by one and prints out the value & index, we don't have to declare variables and iterate, remember we used to write: for i := 0 ; i & lt ; n ; i ++ { do something } Instead we can write it with much cleaner syntax using for-range loop, for-range loops are extensively used in Go. If you don't want to use any value, you can simply discard it using \"_\" , for example if you do not want index position, you can declare for-range as: for _, value : range array1 { do something } The underscore \"_\" simply tells the Go compiler to ignore the value. 2.) Part-2 array.go 29 // declaring an array of type string with shorthand method 30 cities := [ 5 ] string { \"New York\" , \"Seattle\" , \"Mumbai\" , \"Sydney\" , \"Montreal\" } 31 fmt . Println ( \"The values of cities array are:\" , cities ) 32 fmt . Println () 33 34 // Reading specific values 35 fmt . Println ( \"Reading values from cities array using index position...\" ) 36 fmt . Println ( \"The first city is:\" , cities [ 0 ]) 37 fmt . Println ( \"The 3rd city is:\" , cities [ 2 ]) 38 fmt . Println ( \"The last city is:\" , cities [ 4 ]) 39 fmt . Println ( \"The last city can also be found by:\" , cities [ len ( cities ) - 1 ]) 40 fmt . Println () 41 42 // changing values 43 fmt . Println ( \"Changing the value at cities[0] to Paris...\" ) 44 cities [ 0 ] = \"Paris\" 45 fmt . Println ( \"The value at cities[0] is:\" , cities [ 0 ]) 46 } Review On line 30 we declare and initialze the array at the same time cities := [5]string{\"New York\", \"Seattle\", \"Mumbai\", \"Sydney\", \"Montreal\"} We can access values at select index, checkout the lines from 36 to 39. fmt.Println(\"The first city is:\", cities[0]) fmt.Println(\"The 3rd city is:\", cities[2]) fmt.Println(\"The last city is:\", cities[4]) fmt.Println(\"The last city can also be found by:\", cities[len(cities)-1]) We can also change the values in an array, on line 44 we change the value of cities[0] from New York to Paris. cities[0] = \"Paris\"","title":"Code"},{"location":"basic/array/#full-code","text":"array.go package main import \"fmt\" func main () { // declaring an array of type int var array1 [ 5 ] int fmt . Println ( \"The values of array1 are:\" , array1 ) fmt . Println ( \"The length of array1 is:\" , len ( array1 )) fmt . Println () // adding values into the array fmt . Println ( \"Adding values to array1\" ) array1 [ 0 ] = 29 array1 [ 1 ] = 17 array1 [ 2 ] = 42 array1 [ 3 ] = 13 array1 [ 4 ] = 56 fmt . Println ( \"Now the values of array1 are:\" , array1 ) fmt . Println () // Reading all values from array1 using for-range loop fmt . Println ( \"Reading all the values from array1 using for-range loop...\" ) for index , value := range array1 { fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) } fmt . Println () // declaring an array of type string with shorthand method cities := [ 5 ] string { \"New York\" , \"Seattle\" , \"Mumbai\" , \"Sydney\" , \"Montreal\" } fmt . Println ( \"The values of cities array are:\" , cities ) fmt . Println () // Reading specific values fmt . Println ( \"Reading values from cities array using index position...\" ) fmt . Println ( \"The first city is:\" , cities [ 0 ]) fmt . Println ( \"The 3rd city is:\" , cities [ 2 ]) fmt . Println ( \"The last city is:\" , cities [ 4 ]) fmt . Println ( \"The last city can also be found by:\" , cities [ len ( cities ) - 1 ]) fmt . Println () // changing values fmt . Println ( \"Changing the value at cities[0] to Paris...\" ) cities [ 0 ] = \"Paris\" fmt . Println ( \"The value at cities[0] is:\" , cities [ 0 ]) }","title":"Full Code"},{"location":"basic/array/#running-your-code","text":"Open your terminal and navigate to our folder code/basic/11_array/ Once in the folder type the following command go run array.go If there are no errors, you should get the output as: Output The values of array1 are: [0 0 0 0 0] The length of array1 is: 5 Adding values to array1 Now the values of array1 are: [29 17 42 13 56] Reading all the values from array1 using for-range loop... Index: 0 Value: 29 Index: 1 Value: 17 Index: 2 Value: 42 Index: 3 Value: 13 Index: 4 Value: 56 The values of cities array are: [New York Seattle Mumbai Sydney Montreal] Reading values from cities array using index position... The first city is: New York The 3rd city is: Mumbai The last city is: Montreal The last city can also be found by: Montreal Changing the value at cities[0] to Paris... The value at cities[0] is: Paris If for some reason your code isn't working, checkout the github repo.","title":"Running your code"},{"location":"basic/array/#github","text":"Github Repo","title":"Github"},{"location":"basic/array/#golang-playground","text":"Golang Playground","title":"Golang Playground"},{"location":"basic/array/#limitation","text":"Imagine you data is increasing and now you have 100 cities instead of 5, but the array can only hold 5 values, to overcome this limitation Go ships with a flexible type called as \"Slice\".","title":"Limitation"},{"location":"basic/array/#next","text":"We will study slices in depth in the next chapter.","title":"Next"},{"location":"basic/basic-data-types/","text":"Understanding The Basic Data Types In Go \u00b6 Objective \u00b6 Learn the basic data types in Go Data Types \u00b6 For a new programmer, data types sounds geeky enough, but really there isn't much to it, lets see below how it works out. If I ask you, what's your name ? Yours answer would be something like this: My name is Bond, James Bond This is nothing but data type of string , in plain english string is nothing but a collection of characters. Now, if I ask you, how old are you ? You would say something like: 28 Since age is a number or a digit, it belongs to the data type of int , int stands for integer which means whole numbers without decimals. Let's get more curious and ask James Bond, you have a nice watch, how much did it cost ? He would say: $ 105 .23 Now you see nice it has a decimal value, it is called as a data type of float , float is just another fancy way of saying, its a digit with decimal values. James Bond is getting irritated with our question, so lets ask a final question and wrap it up, lets ask, is it true that you are licensed to kill ? He would say True True is neither a digit or a string, its a condition, so it belongs to the data type of boolean , boolean values can be only True or False. In reality the above data types are of very basic types, Go has much more to it, also Go has different varieties of int, float, etc. But for now lets take it easy, we will see different data types as we progress with our code. Next \u00b6 So now you know what are the basic data types in Go, in the next section we will start using them by declaring something called as variables and constants .","title":"04 Understanding Data Types"},{"location":"basic/basic-data-types/#understanding-the-basic-czjqqkd0-data-typesczjqqkd1-in-go","text":"","title":"Understanding The Basic  Data Types In Go"},{"location":"basic/basic-data-types/#objective","text":"Learn the basic data types in Go","title":"Objective"},{"location":"basic/basic-data-types/#data-types","text":"For a new programmer, data types sounds geeky enough, but really there isn't much to it, lets see below how it works out. If I ask you, what's your name ? Yours answer would be something like this: My name is Bond, James Bond This is nothing but data type of string , in plain english string is nothing but a collection of characters. Now, if I ask you, how old are you ? You would say something like: 28 Since age is a number or a digit, it belongs to the data type of int , int stands for integer which means whole numbers without decimals. Let's get more curious and ask James Bond, you have a nice watch, how much did it cost ? He would say: $ 105 .23 Now you see nice it has a decimal value, it is called as a data type of float , float is just another fancy way of saying, its a digit with decimal values. James Bond is getting irritated with our question, so lets ask a final question and wrap it up, lets ask, is it true that you are licensed to kill ? He would say True True is neither a digit or a string, its a condition, so it belongs to the data type of boolean , boolean values can be only True or False. In reality the above data types are of very basic types, Go has much more to it, also Go has different varieties of int, float, etc. But for now lets take it easy, we will see different data types as we progress with our code.","title":"Data Types"},{"location":"basic/basic-data-types/#next","text":"So now you know what are the basic data types in Go, in the next section we will start using them by declaring something called as variables and constants .","title":"Next"},{"location":"basic/basic/","text":"Basic \u00b6 In this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs. Start with the next section to write a \"Hello, World!\" program in Go.","title":"Basic Introduction"},{"location":"basic/basic/#basic","text":"In this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs. Start with the next section to write a \"Hello, World!\" program in Go.","title":"Basic"},{"location":"basic/for_loops/","text":"Understanding For Loops . \u00b6 Objective \u00b6 To understand for loops. Go offers only \"for\" loops for doing repetitive tasks, if you come from some other languages there are no \"while\" or \"do-while\" loops in Go, instead \"for\" loops have a flexible syntax and offers all the looping functions. General syntax is: for condition { do something } Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '08_for_loops' code/basic/08_for_loops And lets create a file 'for_loops.go' in it, finally the structure would look like this: code/basic/08_for_loops/for_loops.go Code \u00b6 The code will be divided into four parts: 1.) for loops 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // Variation 1 - conditional loop 7 num1 := 0 8 fmt . Println ( \"Starting for loop...\" ) 9 for i := 0 ; i < 11 ; i ++ { 10 fmt . Println ( \"Num =\" , num1 ) 11 num1 ++ 12 } 13 fmt . Println () Review Line 9 declared a for loop along with condition for i := 0; i &lt; 11; i++ { We initial the variable \"i\" and set it to \"0\", then we say loop till \"i is less than 11\" and after each pass do \"i++\", i.e increment the value of \"i\" by 1. Line 10 prints the value after each pass and on line 11 we increment the value of num fmt.Println(\"Num =\", num1) num1++ 2.) for loops 14 // Variation 2 - Infinite loop 15 num2 := 20 16 fmt . Println ( \"Entering infinite loop...\" ) 17 for { 18 // break condition 19 if num2 < 10 { 20 break 21 } 22 fmt . Println ( \"Num =\" , num2 ) 23 num2 -- 24 } 25 fmt . Println () Review On line 17 we start a infinite loop, the for loop will keep on executing till it encounters a break condition or runs out of memory for { On line 19 we check for a break condition if num2 &lt; 10 3.) for loops 26 // Variation 3 - Optional statements 27 num3 := 20 28 fmt . Println ( \"Loop with optional statements...\" ) 29 for num3 <= 30 { 30 fmt . Println ( \"Num =\" , num3 ) 31 num3 ++ 32 } 33 fmt . Println () Review On line 29 we start a loop with operational statements, the loop will break when it fulfills the condition. for num3 &lt;= 30 Note we have declared and initialized \"num3\" on line 27 num3 := 20 4.) for loops 34 // Variation 4 - Boolean operators 35 cond := true 36 num4 := 30 37 fmt . Println ( \"Loops with boolean operator...\" ) 38 for cond { 39 if num4 >= 40 { 40 cond = false 41 } 42 fmt . Println ( \"Num =\" , num4 ) 43 num4 ++ 44 } 45 } Review We declare a boolean condition on line 35, and start the loop on line 38 for cond In order to break the loop we set the condition on line 39 if num4 &gt;= 40 { cond = false } Full Code \u00b6 Complete For-Loop Code package main import \"fmt\" func main () { // Variation 1 - conditional loop num1 := 0 fmt . Println ( \"Starting for loop...\" ) for i := 0 ; i < 11 ; i ++ { fmt . Println ( \"Num =\" , num1 ) num1 ++ } fmt . Println () // Variation 2 - Infinite loop num2 := 20 fmt . Println ( \"Entering infinite loop...\" ) for { // break condition if num2 < 10 { break } fmt . Println ( \"Num =\" , num2 ) num2 -- } fmt . Println () // Variation 3 - Optional statements num3 := 20 fmt . Println ( \"Loop with optional statements...\" ) for num3 <= 30 { fmt . Println ( \"Num =\" , num3 ) num3 ++ } fmt . Println () // Variation 4 - Boolean operators cond := true num4 := 30 fmt . Println ( \"Loops with boolean operator...\" ) for cond { if num4 >= 40 { cond = false } fmt . Println ( \"Num =\" , num4 ) num4 ++ } } Run Code \u00b6 Open your terminal and navigate to our folder code/basic/08_for_loops Once in the folder type the following command go run for_loops.go Output \u00b6 Starting for loop... Num = 0 Num = 1 Num = 2 Num = 3 Num = 4 Num = 5 Num = 6 Num = 7 Num = 8 Num = 9 Num = 10 Entering infinite loop... Num = 20 Num = 19 Num = 18 Num = 17 Num = 16 Num = 15 Num = 14 Num = 13 Num = 12 Num = 11 Num = 10 Loop with optional statements... Num = 20 Num = 21 Num = 22 Num = 23 Num = 24 Num = 25 Num = 26 Num = 27 Num = 28 Num = 29 Num = 30 Loops with boolean operator... Num = 30 Num = 31 Num = 32 Num = 33 Num = 34 Num = 35 Num = 36 Num = 37 Num = 38 Num = 39 Num = 40 Note \u00b6 Go ships with one more variant know as \"for - range\", we will study it in the coming chapters. Github \u00b6 Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground \u00b6 You can also run the code at playground Golang Playground Next \u00b6 In the next chapter we will learn about function declaration.","title":"08 For Loops"},{"location":"basic/for_loops/#understanding-czjqqkd0-for-loopsczjqqkd1","text":"","title":"Understanding  For Loops."},{"location":"basic/for_loops/#objective","text":"To understand for loops. Go offers only \"for\" loops for doing repetitive tasks, if you come from some other languages there are no \"while\" or \"do-while\" loops in Go, instead \"for\" loops have a flexible syntax and offers all the looping functions. General syntax is: for condition { do something }","title":"Objective"},{"location":"basic/for_loops/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '08_for_loops' code/basic/08_for_loops And lets create a file 'for_loops.go' in it, finally the structure would look like this: code/basic/08_for_loops/for_loops.go","title":"Structure"},{"location":"basic/for_loops/#code","text":"The code will be divided into four parts: 1.) for loops 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // Variation 1 - conditional loop 7 num1 := 0 8 fmt . Println ( \"Starting for loop...\" ) 9 for i := 0 ; i < 11 ; i ++ { 10 fmt . Println ( \"Num =\" , num1 ) 11 num1 ++ 12 } 13 fmt . Println () Review Line 9 declared a for loop along with condition for i := 0; i &lt; 11; i++ { We initial the variable \"i\" and set it to \"0\", then we say loop till \"i is less than 11\" and after each pass do \"i++\", i.e increment the value of \"i\" by 1. Line 10 prints the value after each pass and on line 11 we increment the value of num fmt.Println(\"Num =\", num1) num1++ 2.) for loops 14 // Variation 2 - Infinite loop 15 num2 := 20 16 fmt . Println ( \"Entering infinite loop...\" ) 17 for { 18 // break condition 19 if num2 < 10 { 20 break 21 } 22 fmt . Println ( \"Num =\" , num2 ) 23 num2 -- 24 } 25 fmt . Println () Review On line 17 we start a infinite loop, the for loop will keep on executing till it encounters a break condition or runs out of memory for { On line 19 we check for a break condition if num2 &lt; 10 3.) for loops 26 // Variation 3 - Optional statements 27 num3 := 20 28 fmt . Println ( \"Loop with optional statements...\" ) 29 for num3 <= 30 { 30 fmt . Println ( \"Num =\" , num3 ) 31 num3 ++ 32 } 33 fmt . Println () Review On line 29 we start a loop with operational statements, the loop will break when it fulfills the condition. for num3 &lt;= 30 Note we have declared and initialized \"num3\" on line 27 num3 := 20 4.) for loops 34 // Variation 4 - Boolean operators 35 cond := true 36 num4 := 30 37 fmt . Println ( \"Loops with boolean operator...\" ) 38 for cond { 39 if num4 >= 40 { 40 cond = false 41 } 42 fmt . Println ( \"Num =\" , num4 ) 43 num4 ++ 44 } 45 } Review We declare a boolean condition on line 35, and start the loop on line 38 for cond In order to break the loop we set the condition on line 39 if num4 &gt;= 40 { cond = false }","title":"Code"},{"location":"basic/for_loops/#full-code","text":"Complete For-Loop Code package main import \"fmt\" func main () { // Variation 1 - conditional loop num1 := 0 fmt . Println ( \"Starting for loop...\" ) for i := 0 ; i < 11 ; i ++ { fmt . Println ( \"Num =\" , num1 ) num1 ++ } fmt . Println () // Variation 2 - Infinite loop num2 := 20 fmt . Println ( \"Entering infinite loop...\" ) for { // break condition if num2 < 10 { break } fmt . Println ( \"Num =\" , num2 ) num2 -- } fmt . Println () // Variation 3 - Optional statements num3 := 20 fmt . Println ( \"Loop with optional statements...\" ) for num3 <= 30 { fmt . Println ( \"Num =\" , num3 ) num3 ++ } fmt . Println () // Variation 4 - Boolean operators cond := true num4 := 30 fmt . Println ( \"Loops with boolean operator...\" ) for cond { if num4 >= 40 { cond = false } fmt . Println ( \"Num =\" , num4 ) num4 ++ } }","title":"Full Code"},{"location":"basic/for_loops/#run-code","text":"Open your terminal and navigate to our folder code/basic/08_for_loops Once in the folder type the following command go run for_loops.go","title":"Run Code"},{"location":"basic/for_loops/#output","text":"Starting for loop... Num = 0 Num = 1 Num = 2 Num = 3 Num = 4 Num = 5 Num = 6 Num = 7 Num = 8 Num = 9 Num = 10 Entering infinite loop... Num = 20 Num = 19 Num = 18 Num = 17 Num = 16 Num = 15 Num = 14 Num = 13 Num = 12 Num = 11 Num = 10 Loop with optional statements... Num = 20 Num = 21 Num = 22 Num = 23 Num = 24 Num = 25 Num = 26 Num = 27 Num = 28 Num = 29 Num = 30 Loops with boolean operator... Num = 30 Num = 31 Num = 32 Num = 33 Num = 34 Num = 35 Num = 36 Num = 37 Num = 38 Num = 39 Num = 40","title":"Output"},{"location":"basic/for_loops/#note","text":"Go ships with one more variant know as \"for - range\", we will study it in the coming chapters.","title":"Note"},{"location":"basic/for_loops/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"basic/for_loops/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"basic/for_loops/#next","text":"In the next chapter we will learn about function declaration.","title":"Next"},{"location":"basic/functions/","text":"Understanding Functions . \u00b6 Objective \u00b6 To understand functions in Go. Functions are first class citizens in Go, in fact you have already been using functions, we have been declaring \"main\" function and using it from our first program. General syntax is: func funcName(optional parameters) return parameters { do something } Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '09_functions' code/basic/09_functions/ And lets create a file 'functions.go' in it, finally the structure would look like this: code/basic/09_functions/functions.go Code \u00b6 The code will be divided into four parts: 1.) Functions 1 package main 2 3 import \"fmt\" 4 5 // sayHello prints \"Hello, Octy!\" 6 func sayHello () { 7 fmt . Println ( \"In func sayHello()...\" ) 8 fmt . Println ( \"Hello, Octy!\" ) 9 fmt . Println () 10 } 11 Review Line 6 defines a function \"sayHello\" which prints \"Hello, Octy!\" on screen func sayHello() 2.) Functions 12 // function with passing values 13 func sayHelloTo ( name string ) { 14 fmt . Println ( \"In func sayHelloTo()...\" ) 15 fmt . Println ( \"Hello,\" , name ) 16 fmt . Println () 17 } 18 Review On line 13 we declare a function \"sayHelloTo\" with accepts a parameter. func sayHelloTo(name string) sayHelloTo accepts a string \"name\" as a parameter and then print it on line 15. 3.) Functions 19 // function with return values 20 func printNums ( n int ) error { 21 fmt . Println ( \"In func printNums()...\" ) 22 var err error 23 for i := 0 ; i <= n ; i ++ { 24 _ , err = fmt . Println ( i ) 25 } 26 return err 27 } 28 Review Line 20 we define a function \"printNums\" with accepts a parameter and returns a parameter of type \"error\". func printNums(n int) error On line 22 we define a variable \"err\" of type \"error\", till now we have seen data types of integer, float, boolean, string, similarly Go offers a custom type \"error\". var err error Line 24 is a little special, Println() returns two values, \"number of bytes written\" and an \"error\", as we don't want number of bytes written we use a underscore \"_\", Go compiler ignores underscore and throws away its value. _, err = fmt.Println(i) We catch the error value in the variable \"err\" and return it on line 26. return err 4.) Functions 29 // main function 30 func main () { 31 fmt . Println ( \"In func main()\" ) 32 fmt . Println ( \"Now calling func sayHello()...\" ) 33 fmt . Println () 34 // calling function sayHello() 35 sayHello () 36 // calling a function with passing values 37 name := \"Gopher\" 38 sayHelloTo ( name ) 39 // calling a function with return parameters 40 err := printNums ( 10 ) 41 if err == nil { 42 fmt . Println ( \"There are no errors!\" ) 43 } else { 44 fmt . Println ( \"Error with printing:\" , err ) 45 } 46 } Review We call individual functions on lines 35, 38 & 40. sayHello() sayHelloTo(name) We pass a value \"name\" along with the function. err := printNums(10) We call printNums along with a value \"10\" and assign it to the variable \"err\", the return error gets stored in the variable \"err\" Full Code \u00b6 Full Code \u00b6 Complete Functions Code package main import \"fmt\" // sayHello prints \"Hello, Octy!\" func sayHello () { fmt . Println ( \"In func sayHello()...\" ) fmt . Println ( \"Hello, Octy!\" ) fmt . Println () } // function with passing values func sayHelloTo ( name string ) { fmt . Println ( \"In func sayHelloTo()...\" ) fmt . Println ( \"Hello,\" , name ) fmt . Println () } // function with return values func printNums ( n int ) error { fmt . Println ( \"In func printNums()...\" ) var err error for i := 0 ; i <= n ; i ++ { _ , err = fmt . Println ( i ) } return err } // main function func main () { fmt . Println ( \"In func main()\" ) fmt . Println ( \"Now calling func sayHello()...\" ) fmt . Println () // calling function sayHello() sayHello () // calling a function with passing values name := \"Gopher\" sayHelloTo ( name ) // calling a function with return parameters err := printNums ( 10 ) if err == nil { fmt . Println ( \"There are no errors!\" ) } else { fmt . Println ( \"Error with printing:\" , err ) } } Running your code \u00b6 Open your terminal and navigate to our folder code/basic/09_functions/ Once in the folder type the following command go run main.go Output \u00b6 In func main() Now calling func sayHello()... In func sayHello()... Hello, Octy! In func sayHelloTo()... Hello, Gopher In func printNums()... 0 1 2 3 4 5 6 7 8 9 10 There are no errors! Github \u00b6 Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground \u00b6 You can also run the code at playground Golang Playground Next \u00b6 In the next chapter we will learn about packages in Go.","title":"09 Function"},{"location":"basic/functions/#understanding-czjqqkd0-functionsczjqqkd1","text":"","title":"Understanding  Functions."},{"location":"basic/functions/#objective","text":"To understand functions in Go. Functions are first class citizens in Go, in fact you have already been using functions, we have been declaring \"main\" function and using it from our first program. General syntax is: func funcName(optional parameters) return parameters { do something }","title":"Objective"},{"location":"basic/functions/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '09_functions' code/basic/09_functions/ And lets create a file 'functions.go' in it, finally the structure would look like this: code/basic/09_functions/functions.go","title":"Structure"},{"location":"basic/functions/#code","text":"The code will be divided into four parts: 1.) Functions 1 package main 2 3 import \"fmt\" 4 5 // sayHello prints \"Hello, Octy!\" 6 func sayHello () { 7 fmt . Println ( \"In func sayHello()...\" ) 8 fmt . Println ( \"Hello, Octy!\" ) 9 fmt . Println () 10 } 11 Review Line 6 defines a function \"sayHello\" which prints \"Hello, Octy!\" on screen func sayHello() 2.) Functions 12 // function with passing values 13 func sayHelloTo ( name string ) { 14 fmt . Println ( \"In func sayHelloTo()...\" ) 15 fmt . Println ( \"Hello,\" , name ) 16 fmt . Println () 17 } 18 Review On line 13 we declare a function \"sayHelloTo\" with accepts a parameter. func sayHelloTo(name string) sayHelloTo accepts a string \"name\" as a parameter and then print it on line 15. 3.) Functions 19 // function with return values 20 func printNums ( n int ) error { 21 fmt . Println ( \"In func printNums()...\" ) 22 var err error 23 for i := 0 ; i <= n ; i ++ { 24 _ , err = fmt . Println ( i ) 25 } 26 return err 27 } 28 Review Line 20 we define a function \"printNums\" with accepts a parameter and returns a parameter of type \"error\". func printNums(n int) error On line 22 we define a variable \"err\" of type \"error\", till now we have seen data types of integer, float, boolean, string, similarly Go offers a custom type \"error\". var err error Line 24 is a little special, Println() returns two values, \"number of bytes written\" and an \"error\", as we don't want number of bytes written we use a underscore \"_\", Go compiler ignores underscore and throws away its value. _, err = fmt.Println(i) We catch the error value in the variable \"err\" and return it on line 26. return err 4.) Functions 29 // main function 30 func main () { 31 fmt . Println ( \"In func main()\" ) 32 fmt . Println ( \"Now calling func sayHello()...\" ) 33 fmt . Println () 34 // calling function sayHello() 35 sayHello () 36 // calling a function with passing values 37 name := \"Gopher\" 38 sayHelloTo ( name ) 39 // calling a function with return parameters 40 err := printNums ( 10 ) 41 if err == nil { 42 fmt . Println ( \"There are no errors!\" ) 43 } else { 44 fmt . Println ( \"Error with printing:\" , err ) 45 } 46 } Review We call individual functions on lines 35, 38 & 40. sayHello() sayHelloTo(name) We pass a value \"name\" along with the function. err := printNums(10) We call printNums along with a value \"10\" and assign it to the variable \"err\", the return error gets stored in the variable \"err\"","title":"Code"},{"location":"basic/functions/#full-code","text":"","title":"Full Code"},{"location":"basic/functions/#full-code_1","text":"Complete Functions Code package main import \"fmt\" // sayHello prints \"Hello, Octy!\" func sayHello () { fmt . Println ( \"In func sayHello()...\" ) fmt . Println ( \"Hello, Octy!\" ) fmt . Println () } // function with passing values func sayHelloTo ( name string ) { fmt . Println ( \"In func sayHelloTo()...\" ) fmt . Println ( \"Hello,\" , name ) fmt . Println () } // function with return values func printNums ( n int ) error { fmt . Println ( \"In func printNums()...\" ) var err error for i := 0 ; i <= n ; i ++ { _ , err = fmt . Println ( i ) } return err } // main function func main () { fmt . Println ( \"In func main()\" ) fmt . Println ( \"Now calling func sayHello()...\" ) fmt . Println () // calling function sayHello() sayHello () // calling a function with passing values name := \"Gopher\" sayHelloTo ( name ) // calling a function with return parameters err := printNums ( 10 ) if err == nil { fmt . Println ( \"There are no errors!\" ) } else { fmt . Println ( \"Error with printing:\" , err ) } }","title":"Full Code"},{"location":"basic/functions/#running-your-code","text":"Open your terminal and navigate to our folder code/basic/09_functions/ Once in the folder type the following command go run main.go","title":"Running your code"},{"location":"basic/functions/#output","text":"In func main() Now calling func sayHello()... In func sayHello()... Hello, Octy! In func sayHelloTo()... Hello, Gopher In func printNums()... 0 1 2 3 4 5 6 7 8 9 10 There are no errors!","title":"Output"},{"location":"basic/functions/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"basic/functions/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"basic/functions/#next","text":"In the next chapter we will learn about packages in Go.","title":"Next"},{"location":"basic/hello-world-understand/","text":"Understanding \"Hello, World!\" Program. \u00b6 Objective \u00b6 Understanding the Hello World program line-by-line Code \u00b6 Hello World 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 fmt . Println ( \"Hello, World!\" ) 7 } Code Review \u00b6 Now its time to dive in and understand the code Line 1 - package main Declares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to Packages in future, for now remmember all files at your project directory level belong to package main. Line 3 - import \"fmt\" Here we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\". \"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts. Documentation for \"fmt\" can be found here \"fmt\" exposes a lot of functionality to us which we use in the line 6. Line 5 - func main () { This is the start or entry point for your code, the compiler will automatically check if func main() is present or not and start the program from there, it is generally mentioned as main.main [package].[function] means \"main\" function in \"main\" package Line 6 - fmt.Println(\"Hello, World!) Here we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen. Now, you can see how we can use functionality written in packages and use it for our ease. Line 7 - } Closes the main function, this symbolizes that main function ends here. Aside \u00b6 Wow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code. As a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand. Learning code takes patience and persistance, fasten your seat belts and keep learning.","title":"02 Understanding Hello World"},{"location":"basic/hello-world-understand/#understanding-czjqqkd0-hello-worldczjqqkd1-program","text":"","title":"Understanding  \"Hello, World!\" Program."},{"location":"basic/hello-world-understand/#objective","text":"Understanding the Hello World program line-by-line","title":"Objective"},{"location":"basic/hello-world-understand/#code","text":"Hello World 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 fmt . Println ( \"Hello, World!\" ) 7 }","title":"Code"},{"location":"basic/hello-world-understand/#code-review","text":"Now its time to dive in and understand the code Line 1 - package main Declares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to Packages in future, for now remmember all files at your project directory level belong to package main. Line 3 - import \"fmt\" Here we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\". \"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts. Documentation for \"fmt\" can be found here \"fmt\" exposes a lot of functionality to us which we use in the line 6. Line 5 - func main () { This is the start or entry point for your code, the compiler will automatically check if func main() is present or not and start the program from there, it is generally mentioned as main.main [package].[function] means \"main\" function in \"main\" package Line 6 - fmt.Println(\"Hello, World!) Here we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen. Now, you can see how we can use functionality written in packages and use it for our ease. Line 7 - } Closes the main function, this symbolizes that main function ends here.","title":"Code Review"},{"location":"basic/hello-world-understand/#aside","text":"Wow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code. As a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand. Learning code takes patience and persistance, fasten your seat belts and keep learning.","title":"Aside"},{"location":"basic/hello-world/","text":"Writing a \"Hello, World!\" program. \u00b6 Objective \u00b6 Write a program which prints \"Hello, World!\" on the screen. Structure \u00b6 Let's create a folder called 'code' anywhere on your machine and we will put all our Go code in it. Inside the 'code' folder lets create one more folder for basic tutorials code/basic/ For our first program create a new folder '01_hello_world' code/basic/01_hello_world And lets create a file 'hello_world.go' in it, finally the structure would look like this: code/basic/01_hello_world/hello_world.go Code \u00b6 Write the code as shown below, while you can simply copy and paste, its better if you write everything on your own. Don't worry if you code won't work, only then copy and paste the code Hello World 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 fmt . Println ( \"Hello, World!\" ) 7 } Running your code \u00b6 Open your terminal and navigate to our folder code/01_hello_world/hello_world.go Once in the folder type the following command go run hello_world.go Build \u00b6 Instead of just running let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command go build hello_world.go If you are running on a unix based system including mac OSx, you can run the binary by typing ./hello_world Output \u00b6 If there are no errors, you should get the output as: Hello, World! If for some reason your code isn't working, checkout the golang playground or github links in the following section. Github \u00b6 Github Repo That's it, Congratulations ! You just wrote your first Go program. Golang Playground \u00b6 Golang has a online sandbox environment for running your Go programs, which can be accessed on Golang Playground I will be posting all the playground links for all the code we write, this way you can run them online and compare with your code. Hello World On Playground Click on the below link: Hello World Next \u00b6 If you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet ! In the next section we will understand everything line-by-line.","title":"01 Hello World"},{"location":"basic/hello-world/#writing-a-czjqqkd0-hello-worldczjqqkd1-program","text":"","title":"Writing a  \"Hello, World!\" program."},{"location":"basic/hello-world/#objective","text":"Write a program which prints \"Hello, World!\" on the screen.","title":"Objective"},{"location":"basic/hello-world/#structure","text":"Let's create a folder called 'code' anywhere on your machine and we will put all our Go code in it. Inside the 'code' folder lets create one more folder for basic tutorials code/basic/ For our first program create a new folder '01_hello_world' code/basic/01_hello_world And lets create a file 'hello_world.go' in it, finally the structure would look like this: code/basic/01_hello_world/hello_world.go","title":"Structure"},{"location":"basic/hello-world/#code","text":"Write the code as shown below, while you can simply copy and paste, its better if you write everything on your own. Don't worry if you code won't work, only then copy and paste the code Hello World 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 fmt . Println ( \"Hello, World!\" ) 7 }","title":"Code"},{"location":"basic/hello-world/#running-your-code","text":"Open your terminal and navigate to our folder code/01_hello_world/hello_world.go Once in the folder type the following command go run hello_world.go","title":"Running your code"},{"location":"basic/hello-world/#build","text":"Instead of just running let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command go build hello_world.go If you are running on a unix based system including mac OSx, you can run the binary by typing ./hello_world","title":"Build"},{"location":"basic/hello-world/#output","text":"If there are no errors, you should get the output as: Hello, World! If for some reason your code isn't working, checkout the golang playground or github links in the following section.","title":"Output"},{"location":"basic/hello-world/#github","text":"Github Repo That's it, Congratulations ! You just wrote your first Go program.","title":"Github"},{"location":"basic/hello-world/#golang-playground","text":"Golang has a online sandbox environment for running your Go programs, which can be accessed on Golang Playground I will be posting all the playground links for all the code we write, this way you can run them online and compare with your code. Hello World On Playground Click on the below link: Hello World","title":"Golang Playground"},{"location":"basic/hello-world/#next","text":"If you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet ! In the next section we will understand everything line-by-line.","title":"Next"},{"location":"basic/if-else/","text":"Conditions if/else . \u00b6 Objective \u00b6 To understand if/else conditions. If/else conditions are of very fundamental importance to programming and are present in all the programming languages. The intent of condition is very simple if condition { do something } else { do another thing } Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '07_if_else' code/basic/07_if_else And lets create a file 'if_else.go' in it, finally the structure would look like this: code/basic/07_if_else/if_else.go Code \u00b6 The code will be divided into two parts 1.) if/else condition 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 d := \"Dog\" 7 c := \"Cat\" 8 9 // checking the value of variables 10 if d == \"Dog\" { 11 fmt . Println ( \"Woff\" ) 12 } else { 13 fmt . Println ( \"I don't know which animal!\" ) 14 } 15 Review on line 10 we check if the value of the variable \"d\" is equal to \"Dog\" if d == \"Dog\" If the condition is true then we print out \"Woff\" fmt.Println(\"Woff\") If the condition is false, we print \"I don't know which animal\" fmt.Println(\"I don't know which animal!\") 2.) If/else statements can also be chained if you have multiple conditions if/else condition 16 // You can also chain if / else conditions 17 if c == \"monkey\" { 18 fmt . Println ( \"I am a monkey.\" ) 19 } else if c == \"Dog\" { 20 fmt . Println ( \"I am a dog.\" ) 21 } else if c == \"Cat\" { 22 fmt . Println ( \"Meoww\" ) 23 } 24 } Review On line 17 we check if value of the variable \"c\" is \"monkey\", if the conditions evaluates to true then we print \"I am a monkey\" if c == \"monkey\" If it evaluates to false then we check it once again if it contains the value of \"Dog\" if c == \"Dog\" Since, this also evaluates to false, we check for the next condition if c == \"Cat\" As it evaluates to true, we print out \"Meoww\" on the screen fmt.Println(\"Meoww\") In case if \"c\" does not evaluate to true in any of the case, nothing will be printed. Running your code \u00b6 Open your terminal and navigate to our folder ccode/basic/07_if_else Once in the folder type the following command go run if_else.go Output \u00b6 Woff Meoww Note \u00b6 Strings in Go are case sensitive, \"monkey\" and \"Monkey\" are evaluated differently, so be sure of using the right case when checking for evaluation. Github \u00b6 Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground \u00b6 You can also run the code at playground Golang Playground Next \u00b6 We will see for loops.","title":"07 Condition - if/else"},{"location":"basic/if-else/#conditions-czjqqkd0-ifelseczjqqkd1","text":"","title":"Conditions  if/else."},{"location":"basic/if-else/#objective","text":"To understand if/else conditions. If/else conditions are of very fundamental importance to programming and are present in all the programming languages. The intent of condition is very simple if condition { do something } else { do another thing }","title":"Objective"},{"location":"basic/if-else/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '07_if_else' code/basic/07_if_else And lets create a file 'if_else.go' in it, finally the structure would look like this: code/basic/07_if_else/if_else.go","title":"Structure"},{"location":"basic/if-else/#code","text":"The code will be divided into two parts 1.) if/else condition 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 d := \"Dog\" 7 c := \"Cat\" 8 9 // checking the value of variables 10 if d == \"Dog\" { 11 fmt . Println ( \"Woff\" ) 12 } else { 13 fmt . Println ( \"I don't know which animal!\" ) 14 } 15 Review on line 10 we check if the value of the variable \"d\" is equal to \"Dog\" if d == \"Dog\" If the condition is true then we print out \"Woff\" fmt.Println(\"Woff\") If the condition is false, we print \"I don't know which animal\" fmt.Println(\"I don't know which animal!\") 2.) If/else statements can also be chained if you have multiple conditions if/else condition 16 // You can also chain if / else conditions 17 if c == \"monkey\" { 18 fmt . Println ( \"I am a monkey.\" ) 19 } else if c == \"Dog\" { 20 fmt . Println ( \"I am a dog.\" ) 21 } else if c == \"Cat\" { 22 fmt . Println ( \"Meoww\" ) 23 } 24 } Review On line 17 we check if value of the variable \"c\" is \"monkey\", if the conditions evaluates to true then we print \"I am a monkey\" if c == \"monkey\" If it evaluates to false then we check it once again if it contains the value of \"Dog\" if c == \"Dog\" Since, this also evaluates to false, we check for the next condition if c == \"Cat\" As it evaluates to true, we print out \"Meoww\" on the screen fmt.Println(\"Meoww\") In case if \"c\" does not evaluate to true in any of the case, nothing will be printed.","title":"Code"},{"location":"basic/if-else/#running-your-code","text":"Open your terminal and navigate to our folder ccode/basic/07_if_else Once in the folder type the following command go run if_else.go","title":"Running your code"},{"location":"basic/if-else/#output","text":"Woff Meoww","title":"Output"},{"location":"basic/if-else/#note","text":"Strings in Go are case sensitive, \"monkey\" and \"Monkey\" are evaluated differently, so be sure of using the right case when checking for evaluation.","title":"Note"},{"location":"basic/if-else/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"basic/if-else/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"basic/if-else/#next","text":"We will see for loops.","title":"Next"},{"location":"basic/map/","text":"Understanding Data Structure of Type Map . \u00b6 Objective \u00b6 Understanding Map's in Go. Imagine yourself creating a team of Avengers and need to add contact details of all your Super Hero's, you essentially would require a phone number be associated with only one Super Hero, this can be easily done using 'Maps' in Go. It is also known as 'Hash Table' in other programming languages and these offer faster lookups, adds and deletes. Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '13_map' code/basic/13_map/ And lets create a file 'maps.go' in it, finally the structure would look like this: code/basic/13_map/maps.go Declaration \u00b6 Syntax Declaration & initialization method mapName := map[KeyType]ValueType With built-in function make() map := make(map[KeyType]ValueType) Code \u00b6 We will write the code in 2 parts: 1.) part-1 maps.go 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // Let's make contact list with names & phone numbers 7 // Initialize a map 'contactList' 8 contactList := make ( map [ string ] int ) 9 // Adding values to map 10 contactList [ \"Iron Man\" ] = 878111222 11 contactList [ \"Thor\" ] = 121131141 12 contactList [ \"Batman\" ] = 483910138 13 contactList [ \"Spider Man\" ] = 478282929 14 15 // print out the map 16 for key , value := range contactList { 17 fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) 18 } 19 fmt . Println ( \"\" ) 20 // Iron man decides to change his number 21 contactList [ \"Iron Man\" ] = 333333333 22 fmt . Printf ( \"The new contact no of Iron Man is: %d\\n\" , contactList [ \"Iron Man\" ]) 23 fmt . Println ( \"\" ) 24 // Now Hulk wants to join the team 25 contactList [ \"Hulk\" ] = 911831925 26 27 // New team is 28 for key , value := range contactList { 29 fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) 30 } 31 Review On line 8 we declare a 'map' and initialize using 'make' contactList := make(map[string]int) We create a map with 'key' of type 'string' and 'value' of type 'int', we want to map the name of the super hero along with their contact number. We can add values to map as done from line 10 to 14. contactList[\"Iron Man\"] = 878111222 contactList[\"Thor\"] = 121131141 contactList[\"Batman\"] = 483910138 contactList[\"Spider Man\"] = 478282929 Map can also be declared and initialized using the following syntax contactList := map[string]int { \"Iron Man\": 878111222, \"Thor\" = 121131141, \"Batman\" = 483910138, \"Spider Man\" = 478282929, } On line 16 we print out the map. We can also change the values of the key, on line 21 we change the number of Iron Man. contactList[\"Iron Man\"] = 333333333 We can also add new super hero on line 25 contactList[\"Hulk\"] = 911831925 2.) part-2 maps.go 32 /* 33 Operators in maps 34 */ 35 // Length of our super hero team 36 fmt . Println ( \"Length: \" , len ( contactList )) 37 38 // Spider man is not performing well and we need to delete him 39 delete ( contactList , \"Spider Man\" ) 40 fmt . Println ( \"Length: \" , len ( contactList )) 41 42 // Checking if Spider Man is deleted or not 43 _ , ok := contactList [ \"Spider Man\" ] 44 if ! ok { 45 fmt . Println ( \"Spider Man is deleted\" ) 46 } 47 } Review On line 36 we check the length of map. fmt.Println(\"Length: \", len(contactList)) We can delete values from our map using 'delete' as on line 39. delete(contactList, \"Spider Man\") On line 43 we check if the key is present in the map or not, it returns a boolean value, 'true' if the key is present and 'false' if not found. _, ok := contactList[\"Spider Man\"] Full Code \u00b6 slice.go package main import \"fmt\" func main () { // Let's make contact list with names & phone numbers // Initialize a map 'contactList' contactList := make ( map [ string ] int ) // Adding values to map contactList [ \"Iron Man\" ] = 878111222 contactList [ \"Thor\" ] = 121131141 contactList [ \"Batman\" ] = 483910138 contactList [ \"Spider Man\" ] = 478282929 // print out the map for key , value := range contactList { fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) } fmt . Println ( \"\" ) // Iron man decides to change his number contactList [ \"Iron Man\" ] = 333333333 fmt . Printf ( \"The new contact no of Iron Man is: %d\\n\" , contactList [ \"Iron Man\" ]) fmt . Println ( \"\" ) // Now Hulk wants to join the team contactList [ \"Hulk\" ] = 911831925 // New team is for key , value := range contactList { fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) } /* Operators in maps */ // Length of our super hero team fmt . Println ( \"Length: \" , len ( contactList )) // Siper man is not performing well and we need to delete him delete ( contactList , \"Spider Man\" ) fmt . Println ( \"Length: \" , len ( contactList )) // Checking if Siper Man is deleted or not _ , ok := contactList [ \"Spider Man\" ] if ! ok { fmt . Println ( \"Spider Man is deleted\" ) } } Running your code \u00b6 Open your terminal and navigate to our folder code/basic/12_slice/ Once in the folder type the following command go run slice.go If there are no errors, you should get the output as: Output Key = Iron Man Value = 878111222 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 The new contact no of Iron Man is: 333333333 Key = Iron Man Value = 333333333 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 Key = Hulk Value = 911831925 Length: 5 Length: 4 Spider Man is deleted If for some reason your code isn't working, checkout the github repo or playground. Github \u00b6 Github Repo Golang Playground \u00b6 Golang Playground Next \u00b6 In the next chapter we will study Maps .","title":"13 Map"},{"location":"basic/map/#understanding-data-structure-of-type-czjqqkd0-mapczjqqkd1","text":"","title":"Understanding Data Structure of Type  Map."},{"location":"basic/map/#objective","text":"Understanding Map's in Go. Imagine yourself creating a team of Avengers and need to add contact details of all your Super Hero's, you essentially would require a phone number be associated with only one Super Hero, this can be easily done using 'Maps' in Go. It is also known as 'Hash Table' in other programming languages and these offer faster lookups, adds and deletes.","title":"Objective"},{"location":"basic/map/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '13_map' code/basic/13_map/ And lets create a file 'maps.go' in it, finally the structure would look like this: code/basic/13_map/maps.go","title":"Structure"},{"location":"basic/map/#declaration","text":"Syntax Declaration & initialization method mapName := map[KeyType]ValueType With built-in function make() map := make(map[KeyType]ValueType)","title":"Declaration"},{"location":"basic/map/#code","text":"We will write the code in 2 parts: 1.) part-1 maps.go 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // Let's make contact list with names & phone numbers 7 // Initialize a map 'contactList' 8 contactList := make ( map [ string ] int ) 9 // Adding values to map 10 contactList [ \"Iron Man\" ] = 878111222 11 contactList [ \"Thor\" ] = 121131141 12 contactList [ \"Batman\" ] = 483910138 13 contactList [ \"Spider Man\" ] = 478282929 14 15 // print out the map 16 for key , value := range contactList { 17 fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) 18 } 19 fmt . Println ( \"\" ) 20 // Iron man decides to change his number 21 contactList [ \"Iron Man\" ] = 333333333 22 fmt . Printf ( \"The new contact no of Iron Man is: %d\\n\" , contactList [ \"Iron Man\" ]) 23 fmt . Println ( \"\" ) 24 // Now Hulk wants to join the team 25 contactList [ \"Hulk\" ] = 911831925 26 27 // New team is 28 for key , value := range contactList { 29 fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) 30 } 31 Review On line 8 we declare a 'map' and initialize using 'make' contactList := make(map[string]int) We create a map with 'key' of type 'string' and 'value' of type 'int', we want to map the name of the super hero along with their contact number. We can add values to map as done from line 10 to 14. contactList[\"Iron Man\"] = 878111222 contactList[\"Thor\"] = 121131141 contactList[\"Batman\"] = 483910138 contactList[\"Spider Man\"] = 478282929 Map can also be declared and initialized using the following syntax contactList := map[string]int { \"Iron Man\": 878111222, \"Thor\" = 121131141, \"Batman\" = 483910138, \"Spider Man\" = 478282929, } On line 16 we print out the map. We can also change the values of the key, on line 21 we change the number of Iron Man. contactList[\"Iron Man\"] = 333333333 We can also add new super hero on line 25 contactList[\"Hulk\"] = 911831925 2.) part-2 maps.go 32 /* 33 Operators in maps 34 */ 35 // Length of our super hero team 36 fmt . Println ( \"Length: \" , len ( contactList )) 37 38 // Spider man is not performing well and we need to delete him 39 delete ( contactList , \"Spider Man\" ) 40 fmt . Println ( \"Length: \" , len ( contactList )) 41 42 // Checking if Spider Man is deleted or not 43 _ , ok := contactList [ \"Spider Man\" ] 44 if ! ok { 45 fmt . Println ( \"Spider Man is deleted\" ) 46 } 47 } Review On line 36 we check the length of map. fmt.Println(\"Length: \", len(contactList)) We can delete values from our map using 'delete' as on line 39. delete(contactList, \"Spider Man\") On line 43 we check if the key is present in the map or not, it returns a boolean value, 'true' if the key is present and 'false' if not found. _, ok := contactList[\"Spider Man\"]","title":"Code"},{"location":"basic/map/#full-code","text":"slice.go package main import \"fmt\" func main () { // Let's make contact list with names & phone numbers // Initialize a map 'contactList' contactList := make ( map [ string ] int ) // Adding values to map contactList [ \"Iron Man\" ] = 878111222 contactList [ \"Thor\" ] = 121131141 contactList [ \"Batman\" ] = 483910138 contactList [ \"Spider Man\" ] = 478282929 // print out the map for key , value := range contactList { fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) } fmt . Println ( \"\" ) // Iron man decides to change his number contactList [ \"Iron Man\" ] = 333333333 fmt . Printf ( \"The new contact no of Iron Man is: %d\\n\" , contactList [ \"Iron Man\" ]) fmt . Println ( \"\" ) // Now Hulk wants to join the team contactList [ \"Hulk\" ] = 911831925 // New team is for key , value := range contactList { fmt . Printf ( \"Key = %s\\tValue = %d\\n\" , key , value ) } /* Operators in maps */ // Length of our super hero team fmt . Println ( \"Length: \" , len ( contactList )) // Siper man is not performing well and we need to delete him delete ( contactList , \"Spider Man\" ) fmt . Println ( \"Length: \" , len ( contactList )) // Checking if Siper Man is deleted or not _ , ok := contactList [ \"Spider Man\" ] if ! ok { fmt . Println ( \"Spider Man is deleted\" ) } }","title":"Full Code"},{"location":"basic/map/#running-your-code","text":"Open your terminal and navigate to our folder code/basic/12_slice/ Once in the folder type the following command go run slice.go If there are no errors, you should get the output as: Output Key = Iron Man Value = 878111222 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 The new contact no of Iron Man is: 333333333 Key = Iron Man Value = 333333333 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 Key = Hulk Value = 911831925 Length: 5 Length: 4 Spider Man is deleted If for some reason your code isn't working, checkout the github repo or playground.","title":"Running your code"},{"location":"basic/map/#github","text":"Github Repo","title":"Github"},{"location":"basic/map/#golang-playground","text":"Golang Playground","title":"Golang Playground"},{"location":"basic/map/#next","text":"In the next chapter we will study Maps .","title":"Next"},{"location":"basic/packages/","text":"Understanding Packages . \u00b6 Objective \u00b6 To understand packages in Go. You have already used packages, remember we imported \"fmt\" package and used Println() function in it. Packages help us in organizing our code, we can group together related functions in a package. You can create multiple functions and files inside a package. Note, that there can be only one func main() throughout your project, as main() is the starting point in any standalone application. Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '10_packages' code/basic/10_packages/ And lets create a file 'main.go' in it, finally the structure would look like this: code/basic/10_packages/main.go Declaring Packages \u00b6 We will be creating a custom package called as \"greeting\" and have a couple of functions in it, but we first need to declare a package. Navigate to our directory code/basic/10_packages/ For declaring a package create a folder named \"greeting\", now the structure would be code/basic/10_packages/greeting Inside the \"greeting\" folder create a file \"greet.go\", we will write our functions inside \"greet.go\" and call it from main() as required. code/basic/10_packages/greeting/greet.go Now our structure would look like Code \u00b6 A) First let us write the code for our custom package \"greeting\" Open greet.go from: code/basic/10_packages/greeting/greet.go We will write the code in 4 parts: 1.) Part-1 greet.go 1 package greeting 2 3 // The above statement declares that this file belong to 4 // the package \"greeting\" 5 6 // import other packages 7 import \"fmt\" 8 9 // GoodMorning - Note that the name of our function starts with a capital alphabet, 10 // capital alphabet denotes that the function is exported or visible outside 11 // the package. 12 // Now you can understand why Println() has a capital letter in the beginning ! 13 func GoodMorning () { 14 fmt . Println ( \"Good Morning, Octallium!\" ) 15 fmt . Println () 16 } 17 Review On line 1 we declare that this file belongs to the package \"greeting\", note that the package name and the parent directory name has to be the same. package greeting On line 13 we declare a function \"GoodMorning\" which prints out \"Good Morning, Octallium!\" on the screen func GoodMorning() Note that the first alphabet is capital, it symbolizes that the function is exported or visible to other packages, we will call it from our main(). 2.) Part-2 greet.go 18 // goodAfterNoon starts with a lowercase alphabet, means that this function is not 19 // exported, and can only be accessed within the package. 20 // Calling goodAfterNoon from another package will result in an error 21 func goodAfterNoon () { 22 fmt . Println ( \"Good Afternoon, Octallium!\" ) 23 fmt . Println () 24 } 25 26 // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, 27 // and hence it can call it. 28 func CallGoodAfterNoon () { 29 goodAfterNoon () 30 } 31 Review On line 21 we declare a function \"goodAfterNoon\", but since the first alphabet is lowercase, the function is not exported, i.e it is not visible from other packages and can be accessed only within the file. func goodAfterNoon() In order to access it, on line 28 we create another function \"CallGoodAfterNoon\", it can access goodAfterNoon as it belongs to the same file and we can call goodAfterNoon() by calling CallGoodAfterNoon(). func CallGoodAfterNoon() 3.) Part-3 greet.go 32 // GoodNight accepts a string parameter and prints the result to the screen 33 func GoodNight ( name string ) { 34 fmt . Println ( \"Good Night, \" , name ) 35 fmt . Println () 36 } 37 Review On line 33 we declare a function \"GoodNight\" which accepts a string and prints out a message. Note that the function doesn't return anything. func GoodNight(name string) 4.) Part-4 greet.go 38 // Factorial accepts an int parameter and also returns an int, 39 // it calculates the factorial of the input int and returns 40 // the factorial. 41 // At this point ignore how the function works, just concentrate 42 // on the declaration and syntax. 43 func Factorial ( n int ) int { 44 if n == 0 { 45 return 1 46 } 47 return n * Factorial ( n - 1 ) 48 } Review On line 43 we declare a function \"Factorial\" which accepts an int and also returns an int. func Factorial(n int) int At this point don't think how the function is working, let's concentrate on the declaration and syntax. Complete greet.go package greeting // The above statement declares that this file belong to // the package \"greeting\" // import other packages import \"fmt\" // GoodMorning - Note that the name of our function starts with a capital alphabet, // capital alphabet denotes that the function is exported or visible outside // the package. // Now you can understand why Println() has a capital letter in the beginning ! func GoodMorning () { fmt . Println ( \"Good Morning, Octallium!\" ) fmt . Println () } // goodAfterNoon starts with a lowercase alphabet, means that this function is not // exported, and can only be accessed within the package. // Calling goodAfterNoon from another package will result in an error func goodAfterNoon () { fmt . Println ( \"Good Afternoon, Octallium!\" ) fmt . Println () } // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, // and hence it can call it. func CallGoodAfterNoon () { goodAfterNoon () } // GoodNight accepts a string parameter and prints the result to the screen func GoodNight ( name string ) { fmt . Println ( \"Good Night, \" , name ) fmt . Println () } // Factorial accepts an int parameter and also returns an int, // it calculates the factorial of the input int and returns // the factorial. // At this point ignore how the function works, just concentrate // on the declaration and syntax. func Factorial ( n int ) int { if n == 0 { return 1 } return n * Factorial ( n - 1 ) } B) Let's write the main.go Navigate and open main.go from: code/basic/10_packages/main.go main.go 1 package main 2 3 // The above declaration says that this file belongs to the \"main\" package 4 5 // importing our packages 6 import ( 7 // package \"fmt\" comes in-built as a part of Go standard library 8 \"fmt\" 9 // importing our custom package 10 \"./greeting\" 11 // the \"./\" denotes that from the current directory go to the \"greeting\" directory 12 ) 13 14 func main () { 15 // Calling the GoodMorning() from greeting package 16 fmt . Println ( \"Calling function GoodMorning() from package 'greeting'...\" ) 17 greeting . GoodMorning () 18 // Calling the goodAfterNoon() from greeting package 19 fmt . Println ( \"Calling function goodAfterNoon() from package 'greeting'...\" ) 20 // as goodAfterNoon is not directly accessible, we call CallGoodAfterNoon() 21 // which in turn calls goodAfterNoon() 22 greeting . CallGoodAfterNoon () 23 // Calling the GoodNight() from greeting package 24 fmt . Println ( \"Calling function GoodNight() from package 'greeting'...\" ) 25 greeting . GoodNight ( \"Gopher!\" ) 26 // Calling the Factorial function with passing an int 27 num := 10 28 // As Factorial() returns an int, we save it in a new variable \"result\" 29 result := greeting . Factorial ( num ) 30 // Printing the result on screen, note we are using Printf() 31 fmt . Printf ( \"Factorial of %d is: %d.\\n\" , num , result ) 32 } On line 1 we declare that the file belongs to the package \"main\" package main On line 10 we import our custom package \"greeting\" \"./greeting\" The \"./\" denotes that from the current directory go to the \"greeting\" directory. On line 17 we call the GoodMorning function greeting.GoodMorning() Note the syntax packageName.funcName If we try to directly call goodAfterNoon() we will get an error Error : greeting . goodAfterNoon () So, we call it by calling the CallGoodAfterNoon() function on line 22. greeting.CallGoodAfterNoon() On line 25 we call the GoodNight() function and pass a string \"Gopher\" along with it. greeting.GoodNight(\"Gopher!\") On line 29 we call the Factorial() function and pass an int, since it also returns an int, we save it in a variable \"result\" and print the output on line 31 result := greeting.Factorial(num) Running your code \u00b6 Open your terminal and navigate to our folder code/basic/10_packages/ Once in the folder type the following command go run main.go Build \u00b6 Till, now we have been running our code, let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command go build main.go If you are running on a unix based system including mac OSx, you can run the binary by typing ./main If there are no errors, you should get the output as: Output Calling function GoodMorning() from package 'greeting'... Good Morning, Octallium! Calling function goodAfterNoon() from package 'greeting'... Good Afternoon, Octallium! Calling function GoodNight() from package 'greeting'... Good Night, Gopher! Factorial of 10 is: 3628800. If for some reason your code isn't working, checkout the github repo. Github \u00b6 Github Repo That's it, Congratulations ! You just wrote your first custom package in Go. Golang Playground \u00b6 Since golang playground does not allow to declare and use custom packages, it is not possible to post it there, please refer the github repo for any errors. Next \u00b6 We will start the basic data structures of type array .","title":"10 Packages"},{"location":"basic/packages/#understanding-czjqqkd0-packagesczjqqkd1","text":"","title":"Understanding  Packages."},{"location":"basic/packages/#objective","text":"To understand packages in Go. You have already used packages, remember we imported \"fmt\" package and used Println() function in it. Packages help us in organizing our code, we can group together related functions in a package. You can create multiple functions and files inside a package. Note, that there can be only one func main() throughout your project, as main() is the starting point in any standalone application.","title":"Objective"},{"location":"basic/packages/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '10_packages' code/basic/10_packages/ And lets create a file 'main.go' in it, finally the structure would look like this: code/basic/10_packages/main.go","title":"Structure"},{"location":"basic/packages/#declaring-packages","text":"We will be creating a custom package called as \"greeting\" and have a couple of functions in it, but we first need to declare a package. Navigate to our directory code/basic/10_packages/ For declaring a package create a folder named \"greeting\", now the structure would be code/basic/10_packages/greeting Inside the \"greeting\" folder create a file \"greet.go\", we will write our functions inside \"greet.go\" and call it from main() as required. code/basic/10_packages/greeting/greet.go Now our structure would look like","title":"Declaring Packages"},{"location":"basic/packages/#code","text":"A) First let us write the code for our custom package \"greeting\" Open greet.go from: code/basic/10_packages/greeting/greet.go We will write the code in 4 parts: 1.) Part-1 greet.go 1 package greeting 2 3 // The above statement declares that this file belong to 4 // the package \"greeting\" 5 6 // import other packages 7 import \"fmt\" 8 9 // GoodMorning - Note that the name of our function starts with a capital alphabet, 10 // capital alphabet denotes that the function is exported or visible outside 11 // the package. 12 // Now you can understand why Println() has a capital letter in the beginning ! 13 func GoodMorning () { 14 fmt . Println ( \"Good Morning, Octallium!\" ) 15 fmt . Println () 16 } 17 Review On line 1 we declare that this file belongs to the package \"greeting\", note that the package name and the parent directory name has to be the same. package greeting On line 13 we declare a function \"GoodMorning\" which prints out \"Good Morning, Octallium!\" on the screen func GoodMorning() Note that the first alphabet is capital, it symbolizes that the function is exported or visible to other packages, we will call it from our main(). 2.) Part-2 greet.go 18 // goodAfterNoon starts with a lowercase alphabet, means that this function is not 19 // exported, and can only be accessed within the package. 20 // Calling goodAfterNoon from another package will result in an error 21 func goodAfterNoon () { 22 fmt . Println ( \"Good Afternoon, Octallium!\" ) 23 fmt . Println () 24 } 25 26 // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, 27 // and hence it can call it. 28 func CallGoodAfterNoon () { 29 goodAfterNoon () 30 } 31 Review On line 21 we declare a function \"goodAfterNoon\", but since the first alphabet is lowercase, the function is not exported, i.e it is not visible from other packages and can be accessed only within the file. func goodAfterNoon() In order to access it, on line 28 we create another function \"CallGoodAfterNoon\", it can access goodAfterNoon as it belongs to the same file and we can call goodAfterNoon() by calling CallGoodAfterNoon(). func CallGoodAfterNoon() 3.) Part-3 greet.go 32 // GoodNight accepts a string parameter and prints the result to the screen 33 func GoodNight ( name string ) { 34 fmt . Println ( \"Good Night, \" , name ) 35 fmt . Println () 36 } 37 Review On line 33 we declare a function \"GoodNight\" which accepts a string and prints out a message. Note that the function doesn't return anything. func GoodNight(name string) 4.) Part-4 greet.go 38 // Factorial accepts an int parameter and also returns an int, 39 // it calculates the factorial of the input int and returns 40 // the factorial. 41 // At this point ignore how the function works, just concentrate 42 // on the declaration and syntax. 43 func Factorial ( n int ) int { 44 if n == 0 { 45 return 1 46 } 47 return n * Factorial ( n - 1 ) 48 } Review On line 43 we declare a function \"Factorial\" which accepts an int and also returns an int. func Factorial(n int) int At this point don't think how the function is working, let's concentrate on the declaration and syntax. Complete greet.go package greeting // The above statement declares that this file belong to // the package \"greeting\" // import other packages import \"fmt\" // GoodMorning - Note that the name of our function starts with a capital alphabet, // capital alphabet denotes that the function is exported or visible outside // the package. // Now you can understand why Println() has a capital letter in the beginning ! func GoodMorning () { fmt . Println ( \"Good Morning, Octallium!\" ) fmt . Println () } // goodAfterNoon starts with a lowercase alphabet, means that this function is not // exported, and can only be accessed within the package. // Calling goodAfterNoon from another package will result in an error func goodAfterNoon () { fmt . Println ( \"Good Afternoon, Octallium!\" ) fmt . Println () } // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, // and hence it can call it. func CallGoodAfterNoon () { goodAfterNoon () } // GoodNight accepts a string parameter and prints the result to the screen func GoodNight ( name string ) { fmt . Println ( \"Good Night, \" , name ) fmt . Println () } // Factorial accepts an int parameter and also returns an int, // it calculates the factorial of the input int and returns // the factorial. // At this point ignore how the function works, just concentrate // on the declaration and syntax. func Factorial ( n int ) int { if n == 0 { return 1 } return n * Factorial ( n - 1 ) } B) Let's write the main.go Navigate and open main.go from: code/basic/10_packages/main.go main.go 1 package main 2 3 // The above declaration says that this file belongs to the \"main\" package 4 5 // importing our packages 6 import ( 7 // package \"fmt\" comes in-built as a part of Go standard library 8 \"fmt\" 9 // importing our custom package 10 \"./greeting\" 11 // the \"./\" denotes that from the current directory go to the \"greeting\" directory 12 ) 13 14 func main () { 15 // Calling the GoodMorning() from greeting package 16 fmt . Println ( \"Calling function GoodMorning() from package 'greeting'...\" ) 17 greeting . GoodMorning () 18 // Calling the goodAfterNoon() from greeting package 19 fmt . Println ( \"Calling function goodAfterNoon() from package 'greeting'...\" ) 20 // as goodAfterNoon is not directly accessible, we call CallGoodAfterNoon() 21 // which in turn calls goodAfterNoon() 22 greeting . CallGoodAfterNoon () 23 // Calling the GoodNight() from greeting package 24 fmt . Println ( \"Calling function GoodNight() from package 'greeting'...\" ) 25 greeting . GoodNight ( \"Gopher!\" ) 26 // Calling the Factorial function with passing an int 27 num := 10 28 // As Factorial() returns an int, we save it in a new variable \"result\" 29 result := greeting . Factorial ( num ) 30 // Printing the result on screen, note we are using Printf() 31 fmt . Printf ( \"Factorial of %d is: %d.\\n\" , num , result ) 32 } On line 1 we declare that the file belongs to the package \"main\" package main On line 10 we import our custom package \"greeting\" \"./greeting\" The \"./\" denotes that from the current directory go to the \"greeting\" directory. On line 17 we call the GoodMorning function greeting.GoodMorning() Note the syntax packageName.funcName If we try to directly call goodAfterNoon() we will get an error Error : greeting . goodAfterNoon () So, we call it by calling the CallGoodAfterNoon() function on line 22. greeting.CallGoodAfterNoon() On line 25 we call the GoodNight() function and pass a string \"Gopher\" along with it. greeting.GoodNight(\"Gopher!\") On line 29 we call the Factorial() function and pass an int, since it also returns an int, we save it in a variable \"result\" and print the output on line 31 result := greeting.Factorial(num)","title":"Code"},{"location":"basic/packages/#running-your-code","text":"Open your terminal and navigate to our folder code/basic/10_packages/ Once in the folder type the following command go run main.go","title":"Running your code"},{"location":"basic/packages/#build","text":"Till, now we have been running our code, let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command go build main.go If you are running on a unix based system including mac OSx, you can run the binary by typing ./main If there are no errors, you should get the output as: Output Calling function GoodMorning() from package 'greeting'... Good Morning, Octallium! Calling function goodAfterNoon() from package 'greeting'... Good Afternoon, Octallium! Calling function GoodNight() from package 'greeting'... Good Night, Gopher! Factorial of 10 is: 3628800. If for some reason your code isn't working, checkout the github repo.","title":"Build"},{"location":"basic/packages/#github","text":"Github Repo That's it, Congratulations ! You just wrote your first custom package in Go.","title":"Github"},{"location":"basic/packages/#golang-playground","text":"Since golang playground does not allow to declare and use custom packages, it is not possible to post it there, please refer the github repo for any errors.","title":"Golang Playground"},{"location":"basic/packages/#next","text":"We will start the basic data structures of type array .","title":"Next"},{"location":"basic/shorthand-declaration/","text":"Shorthand Declaration Of Variables. \u00b6 Objective \u00b6 Learn how to declare variables using the shorthand method. Declaration \u00b6 Go ships with a smart compiler, it can detect the data type and automatically assign it to variables, using short declaration is very widely used in Go, with this method you can create variables on the fly, no need for prior declaration. General syntax variableName := value It is also called as inference type declaration, meaning that the variable type is \"inferred\" from the value. This method offers various benefits such as compiler can choose the right data type and much more which we will explore as we write more code. Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '06_shorthand_declaration' code/basic/06_shorthand_declaration And lets create a file 'shorthand_declaration.go' in it, finally the structure would look like this: code/basic/06_shorthand_declaration/shorthand_declaration.go Code \u00b6 Shorthand Declaration 1 package main 2 3 import \"fmt\" 4 func main () { 5 // declaring integer 6 num := 12 7 fmt . Printf ( \"The type of variable 'num' is: %T.\\n\" , num ) 8 9 // declaring float 10 decimal := 15.45 11 fmt . Printf ( \"The type of variable 'decimal' is: %T.\\n\" , decimal ) 12 13 // declaring string 14 name := \"Octallium\" 15 fmt . Printf ( \"The type of variable 'name' is : %T.\\n\" , name ) 16 } Code Review \u00b6 On line 6, 10 & 14 we declare a new variable num := 12 decimal := 15.45 name := \"Octallium\" To check the data type we use a special format output function fmt.Printf() Note, in the earlier examples we had used fmt.Println() On line 7, 11 & 15, we print out the data type, to check the data type we use a special character \"%T\", which acts as a placeholder and represent the data \"Type\", it is followed by the variable name. fmt.Printf(\"The type of variable 'num' is: %T.\\n\", num) fmt.Printf(\"The type of variable 'decimal' is: %T.\\n\", decimal) fmt.Printf(\"The type of variable 'name' is : %T.\\n\", name) If you don't understand the print statements, no worries, we will be having a dedicated section on formatting output, for now type everything as in the code above and make sure it runs. Run Code \u00b6 Open your terminal and navigate to our folder code/basic/06_shorthand_declaration Once in the folder type the following command go run shorthand_declaration.go Output \u00b6 The type of variable 'num' is: int. The type of variable 'decimal' is: float64. The type of variable 'name' is : string. Github \u00b6 Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground \u00b6 You can also run the code at playground Golang Playground Next \u00b6 In the next chapter we will see about if/else condition, don't worry if its becoming too geeky, keep up with the code and in no time you will get the hang of it.","title":"06 Shorthand Declaration"},{"location":"basic/shorthand-declaration/#czjqqkd0-shorthandczjqqkd1-declaration-of-variables","text":"","title":" Shorthand Declaration Of Variables."},{"location":"basic/shorthand-declaration/#objective","text":"Learn how to declare variables using the shorthand method.","title":"Objective"},{"location":"basic/shorthand-declaration/#declaration","text":"Go ships with a smart compiler, it can detect the data type and automatically assign it to variables, using short declaration is very widely used in Go, with this method you can create variables on the fly, no need for prior declaration. General syntax variableName := value It is also called as inference type declaration, meaning that the variable type is \"inferred\" from the value. This method offers various benefits such as compiler can choose the right data type and much more which we will explore as we write more code.","title":"Declaration"},{"location":"basic/shorthand-declaration/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '06_shorthand_declaration' code/basic/06_shorthand_declaration And lets create a file 'shorthand_declaration.go' in it, finally the structure would look like this: code/basic/06_shorthand_declaration/shorthand_declaration.go","title":"Structure"},{"location":"basic/shorthand-declaration/#code","text":"Shorthand Declaration 1 package main 2 3 import \"fmt\" 4 func main () { 5 // declaring integer 6 num := 12 7 fmt . Printf ( \"The type of variable 'num' is: %T.\\n\" , num ) 8 9 // declaring float 10 decimal := 15.45 11 fmt . Printf ( \"The type of variable 'decimal' is: %T.\\n\" , decimal ) 12 13 // declaring string 14 name := \"Octallium\" 15 fmt . Printf ( \"The type of variable 'name' is : %T.\\n\" , name ) 16 }","title":"Code"},{"location":"basic/shorthand-declaration/#code-review","text":"On line 6, 10 & 14 we declare a new variable num := 12 decimal := 15.45 name := \"Octallium\" To check the data type we use a special format output function fmt.Printf() Note, in the earlier examples we had used fmt.Println() On line 7, 11 & 15, we print out the data type, to check the data type we use a special character \"%T\", which acts as a placeholder and represent the data \"Type\", it is followed by the variable name. fmt.Printf(\"The type of variable 'num' is: %T.\\n\", num) fmt.Printf(\"The type of variable 'decimal' is: %T.\\n\", decimal) fmt.Printf(\"The type of variable 'name' is : %T.\\n\", name) If you don't understand the print statements, no worries, we will be having a dedicated section on formatting output, for now type everything as in the code above and make sure it runs.","title":"Code Review"},{"location":"basic/shorthand-declaration/#run-code","text":"Open your terminal and navigate to our folder code/basic/06_shorthand_declaration Once in the folder type the following command go run shorthand_declaration.go","title":"Run Code"},{"location":"basic/shorthand-declaration/#output","text":"The type of variable 'num' is: int. The type of variable 'decimal' is: float64. The type of variable 'name' is : string.","title":"Output"},{"location":"basic/shorthand-declaration/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"basic/shorthand-declaration/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"basic/shorthand-declaration/#next","text":"In the next chapter we will see about if/else condition, don't worry if its becoming too geeky, keep up with the code and in no time you will get the hang of it.","title":"Next"},{"location":"basic/slice/","text":"Understanding Data Structure of Type Slice . \u00b6 Objective \u00b6 Understanding Slice's in Go. Slice are dynamic versions of array, slices can grow & shrink in length as required. Underlying the slice is an array and a pointer to it, exactly how the Go compiler stores the slice is a little complex, we will cover it in the \"Intermediate\" section of the tutorial. Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '12_slice' code/basic/12_slice/ And lets create a file 'slice.go' in it, finally the structure would look like this: code/basic/12_slice/slice.go Declaration \u00b6 Syntax Declaration & initialization method sliceName := []type{value1, value2, ...} With built-in function make() slice := make([]type, length, capacity) Make initializes the underlying array with zero value and returns a slice that refers to that array. Make is used extensively to initialize slices. Code \u00b6 We will write the code in 4 parts: 1.) part-1 slice.go 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // declaring a nil slice 7 var slice1 [] int 8 fmt . Println ( \"slice1:\" , slice1 ) 9 fmt . Println ( \"The length of slice1 is:\" , len ( slice1 )) 10 fmt . Println ( \"The capacity of slice1 is:\" , cap ( slice1 )) 11 fmt . Println () 12 // declaring a slice with initialization 13 slice2 := [] int { 1 , 2 , 3 , 4 , 5 } 14 fmt . Println ( \"slice2:\" , slice2 ) 15 fmt . Println ( \"The length of slice2 is:\" , len ( slice2 )) 16 fmt . Println ( \"The capacity of slice2 is:\" , cap ( slice2 )) 17 fmt . Println () 18 19 // declaring a slice of length 5 with make 20 slice3 := make ([] string , 5 ) 21 fmt . Println ( \"slice3:\" , slice3 ) 22 fmt . Println ( \"The length of slice3 is:\" , len ( slice3 )) 23 fmt . Println ( \"The capacity of slice3 is:\" , cap ( slice3 )) 24 fmt . Println () 25 Review On line 7, 13 & 20 we declare slice using different syntax var slice1 []int This declares a nil slice, the length & capacity are zero. As you will see in forth coming examples, slices can have variable length and capacity. Slices can dynamically resize till it reaches its capacity, we will shortly see how this is done. slice2 := []int{1, 2, 3, 4, 5} Above line declares a slice and initializes its value, in this case length & capacity are equal. slice3 := make([]string, 5) This initializes a zero value slice with the length & capacity of 5. Note the difference in length & capacity of slice3 as compared to slice1. 2.) part-2 slice.go 26 // declaring a slice of length 5 and capacity 10 with make 27 slice4 := make ([] int , 5 , 10 ) 28 fmt . Println ( \"slice4:\" , slice4 ) 29 fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) 30 fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) 31 fmt . Println () 32 33 // inserting values, note i < 6 will give an error as we have 34 // set the length to 5 35 for i := 0 ; i < 5 ; i ++ { 36 slice4 [ i ] = i 37 } 38 fmt . Println ( \"slice4:\" , slice4 ) 39 fmt . Println () 40 41 // increasing the length of slice 42 fmt . Println ( \"Increasing the length of slice...\" ) 43 44 // slice4 = slice4[:11] will give an error as capacity is 10 45 slice4 = slice4 [: 10 ] 46 fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) 47 fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) 48 for i := 5 ; i < 10 ; i ++ { 49 slice4 [ i ] = i 50 } 51 fmt . Println () 52 53 // printing slice4 54 fmt . Println ( \"slice4:\" , slice4 ) 55 fmt . Println () 56 Review On line 27 we declare a new slice with length = 5 and capacity = 10. slice4 := make([]int, 5, 10) Then on line 35 we insert values into the slice, note we insert values only till index = 4 or length = 5 (remember our index starts from 0 and not 1!) If we exceed length of 5, it will throw an error as we have declared our length as 5. On line 45 we dynamically increase the length to 10. slice4 = slice4[:10] Now we can insert values upto length = 10 or index = 9. On line 54 we print out our new slice. fmt.Println(\"slice4:\", slice4) 3.) part-3 slice.go 57 // creating a new slice 58 slice5 := slice4 [ 2 : 8 ] 59 fmt . Println ( \"slice5:\" , slice5 ) 60 fmt . Println () 61 Review We can create new slice from an existing one, on line 58 we create a new slice5 which has values from slice4 but only from index 2 to 8. slice5 := slice4[2:8] Then we print out the slice on line 59. fmt.Println(\"slice5:\", slice5) 4.) part-4 slice.go 62 // two-D slice 63 twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} 64 fmt . Println ( \"Print out values of twoD slice...\" ) 65 for i , subSlice := range twoD { 66 fmt . Printf ( \"At index: %d of twoD, Value: %v\\n\" , i , subSlice ) 67 for index , value := range subSlice { 68 fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) 69 } 70 fmt . Println () 71 } 72 } Review Slice can have slices inside it, above we create a two-D slice, i.e a slice inside a slice, you can create multiple dimension slices, e.g three-D or four-D or even larger. On line 63 we declare a two-D slice of type int twoD := [][]int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} Note the syntax, it contains a slice within a slice, all separated by curly brackets and comma. On line 65 we start a for-range loop to print all the values inside two-D for i, slice := range twoD This takes the first slice inside twoD and assigns it to the variable \"subSlice\", then we again loop over subSlice to print all the values. for index, value := range subSlice Creating multi-dimension slices also increases the complexity, Go offers multiply other data types to tackle this as we will study then in forth coming chapters. Full Code \u00b6 slice.go package main import \"fmt\" func main () { // declaring a nil slice var slice1 [] int fmt . Println ( \"slice1:\" , slice1 ) fmt . Println ( \"The length of slice1 is:\" , len ( slice1 )) fmt . Println ( \"The capacity of slice1 is:\" , cap ( slice1 )) fmt . Println () // declaring a slice with initialization slice2 := [] int { 1 , 2 , 3 , 4 , 5 } fmt . Println ( \"slice2:\" , slice2 ) fmt . Println ( \"The length of slice2 is:\" , len ( slice2 )) fmt . Println ( \"The capacity of slice2 is:\" , cap ( slice2 )) fmt . Println () // declaring a slice of length 5 with make slice3 := make ([] string , 5 ) fmt . Println ( \"slice3:\" , slice3 ) fmt . Println ( \"The length of slice3 is:\" , len ( slice3 )) fmt . Println ( \"The capacity of slice3 is:\" , cap ( slice3 )) fmt . Println () // declaring a slice of length 5 and capacity 10 with make slice4 := make ([] int , 5 , 10 ) fmt . Println ( \"slice4:\" , slice4 ) fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) fmt . Println () // inserting values, note i < 6 will give an error as we have // set the length to 5 for i := 0 ; i < 5 ; i ++ { slice4 [ i ] = i } fmt . Println ( \"slice4:\" , slice4 ) fmt . Println () // increasing the length of slice fmt . Println ( \"Increasing the length of slice...\" ) // slice4 = slice4[:11] will give an error as capacity is 10 slice4 = slice4 [: 10 ] fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) for i := 5 ; i < 10 ; i ++ { slice4 [ i ] = i } fmt . Println () // printing slice4 fmt . Println ( \"slice4:\" , slice4 ) fmt . Println () // creating a new slice slice5 := slice4 [ 2 : 8 ] fmt . Println ( \"slice5:\" , slice5 ) fmt . Println () // two-D slice twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} fmt . Println ( \"Print out values of twoD slice...\" ) for i , slice := range twoD { fmt . Printf ( \"At index: %d of twoD, Value: %v\\n\" , i , slice ) for index , value := range slice { fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) } fmt . Println () } } Running your code \u00b6 Open your terminal and navigate to our folder code/basic/12_slice/ Once in the folder type the following command go run slice.go If there are no errors, you should get the output as: Output slice1: [] The length of slice1 is: 0 The capacity of slice1 is: 0 slice2: [1 2 3 4 5] The length of slice2 is: 5 The capacity of slice2 is: 5 slice3: [ ] The length of slice3 is: 5 The capacity of slice3 is: 5 slice4: [0 0 0 0 0] The length of slice4 is: 5 The capacity of slice4 is: 10 slice4: [0 1 2 3 4] Increasing the length of slice... The length of slice4 is: 10 The capacity of slice4 is: 10 slice4: [0 1 2 3 4 5 6 7 8 9] slice5: [2 3 4 5 6 7] Print out values of twoD slice... At index: 0 of twoD, Value: [3 4] Index: 0 Value: 3 Index: 1 Value: 4 At index: 1 of twoD, Value: [1 5] Index: 0 Value: 1 Index: 1 Value: 5 At index: 2 of twoD, Value: [9 2] Index: 0 Value: 9 Index: 1 Value: 2 At index: 3 of twoD, Value: [7 8] Index: 0 Value: 7 Index: 1 Value: 8 If for some reason your code isn't working, checkout the github repo or playground. Github \u00b6 Github Repo Golang Playground \u00b6 Golang Playground Next \u00b6 In the next chapter we will study Maps .","title":"12 Slice"},{"location":"basic/slice/#understanding-data-structure-of-type-czjqqkd0-sliceczjqqkd1","text":"","title":"Understanding Data Structure of Type  Slice."},{"location":"basic/slice/#objective","text":"Understanding Slice's in Go. Slice are dynamic versions of array, slices can grow & shrink in length as required. Underlying the slice is an array and a pointer to it, exactly how the Go compiler stores the slice is a little complex, we will cover it in the \"Intermediate\" section of the tutorial.","title":"Objective"},{"location":"basic/slice/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '12_slice' code/basic/12_slice/ And lets create a file 'slice.go' in it, finally the structure would look like this: code/basic/12_slice/slice.go","title":"Structure"},{"location":"basic/slice/#declaration","text":"Syntax Declaration & initialization method sliceName := []type{value1, value2, ...} With built-in function make() slice := make([]type, length, capacity) Make initializes the underlying array with zero value and returns a slice that refers to that array. Make is used extensively to initialize slices.","title":"Declaration"},{"location":"basic/slice/#code","text":"We will write the code in 4 parts: 1.) part-1 slice.go 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // declaring a nil slice 7 var slice1 [] int 8 fmt . Println ( \"slice1:\" , slice1 ) 9 fmt . Println ( \"The length of slice1 is:\" , len ( slice1 )) 10 fmt . Println ( \"The capacity of slice1 is:\" , cap ( slice1 )) 11 fmt . Println () 12 // declaring a slice with initialization 13 slice2 := [] int { 1 , 2 , 3 , 4 , 5 } 14 fmt . Println ( \"slice2:\" , slice2 ) 15 fmt . Println ( \"The length of slice2 is:\" , len ( slice2 )) 16 fmt . Println ( \"The capacity of slice2 is:\" , cap ( slice2 )) 17 fmt . Println () 18 19 // declaring a slice of length 5 with make 20 slice3 := make ([] string , 5 ) 21 fmt . Println ( \"slice3:\" , slice3 ) 22 fmt . Println ( \"The length of slice3 is:\" , len ( slice3 )) 23 fmt . Println ( \"The capacity of slice3 is:\" , cap ( slice3 )) 24 fmt . Println () 25 Review On line 7, 13 & 20 we declare slice using different syntax var slice1 []int This declares a nil slice, the length & capacity are zero. As you will see in forth coming examples, slices can have variable length and capacity. Slices can dynamically resize till it reaches its capacity, we will shortly see how this is done. slice2 := []int{1, 2, 3, 4, 5} Above line declares a slice and initializes its value, in this case length & capacity are equal. slice3 := make([]string, 5) This initializes a zero value slice with the length & capacity of 5. Note the difference in length & capacity of slice3 as compared to slice1. 2.) part-2 slice.go 26 // declaring a slice of length 5 and capacity 10 with make 27 slice4 := make ([] int , 5 , 10 ) 28 fmt . Println ( \"slice4:\" , slice4 ) 29 fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) 30 fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) 31 fmt . Println () 32 33 // inserting values, note i < 6 will give an error as we have 34 // set the length to 5 35 for i := 0 ; i < 5 ; i ++ { 36 slice4 [ i ] = i 37 } 38 fmt . Println ( \"slice4:\" , slice4 ) 39 fmt . Println () 40 41 // increasing the length of slice 42 fmt . Println ( \"Increasing the length of slice...\" ) 43 44 // slice4 = slice4[:11] will give an error as capacity is 10 45 slice4 = slice4 [: 10 ] 46 fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) 47 fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) 48 for i := 5 ; i < 10 ; i ++ { 49 slice4 [ i ] = i 50 } 51 fmt . Println () 52 53 // printing slice4 54 fmt . Println ( \"slice4:\" , slice4 ) 55 fmt . Println () 56 Review On line 27 we declare a new slice with length = 5 and capacity = 10. slice4 := make([]int, 5, 10) Then on line 35 we insert values into the slice, note we insert values only till index = 4 or length = 5 (remember our index starts from 0 and not 1!) If we exceed length of 5, it will throw an error as we have declared our length as 5. On line 45 we dynamically increase the length to 10. slice4 = slice4[:10] Now we can insert values upto length = 10 or index = 9. On line 54 we print out our new slice. fmt.Println(\"slice4:\", slice4) 3.) part-3 slice.go 57 // creating a new slice 58 slice5 := slice4 [ 2 : 8 ] 59 fmt . Println ( \"slice5:\" , slice5 ) 60 fmt . Println () 61 Review We can create new slice from an existing one, on line 58 we create a new slice5 which has values from slice4 but only from index 2 to 8. slice5 := slice4[2:8] Then we print out the slice on line 59. fmt.Println(\"slice5:\", slice5) 4.) part-4 slice.go 62 // two-D slice 63 twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} 64 fmt . Println ( \"Print out values of twoD slice...\" ) 65 for i , subSlice := range twoD { 66 fmt . Printf ( \"At index: %d of twoD, Value: %v\\n\" , i , subSlice ) 67 for index , value := range subSlice { 68 fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) 69 } 70 fmt . Println () 71 } 72 } Review Slice can have slices inside it, above we create a two-D slice, i.e a slice inside a slice, you can create multiple dimension slices, e.g three-D or four-D or even larger. On line 63 we declare a two-D slice of type int twoD := [][]int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} Note the syntax, it contains a slice within a slice, all separated by curly brackets and comma. On line 65 we start a for-range loop to print all the values inside two-D for i, slice := range twoD This takes the first slice inside twoD and assigns it to the variable \"subSlice\", then we again loop over subSlice to print all the values. for index, value := range subSlice Creating multi-dimension slices also increases the complexity, Go offers multiply other data types to tackle this as we will study then in forth coming chapters.","title":"Code"},{"location":"basic/slice/#full-code","text":"slice.go package main import \"fmt\" func main () { // declaring a nil slice var slice1 [] int fmt . Println ( \"slice1:\" , slice1 ) fmt . Println ( \"The length of slice1 is:\" , len ( slice1 )) fmt . Println ( \"The capacity of slice1 is:\" , cap ( slice1 )) fmt . Println () // declaring a slice with initialization slice2 := [] int { 1 , 2 , 3 , 4 , 5 } fmt . Println ( \"slice2:\" , slice2 ) fmt . Println ( \"The length of slice2 is:\" , len ( slice2 )) fmt . Println ( \"The capacity of slice2 is:\" , cap ( slice2 )) fmt . Println () // declaring a slice of length 5 with make slice3 := make ([] string , 5 ) fmt . Println ( \"slice3:\" , slice3 ) fmt . Println ( \"The length of slice3 is:\" , len ( slice3 )) fmt . Println ( \"The capacity of slice3 is:\" , cap ( slice3 )) fmt . Println () // declaring a slice of length 5 and capacity 10 with make slice4 := make ([] int , 5 , 10 ) fmt . Println ( \"slice4:\" , slice4 ) fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) fmt . Println () // inserting values, note i < 6 will give an error as we have // set the length to 5 for i := 0 ; i < 5 ; i ++ { slice4 [ i ] = i } fmt . Println ( \"slice4:\" , slice4 ) fmt . Println () // increasing the length of slice fmt . Println ( \"Increasing the length of slice...\" ) // slice4 = slice4[:11] will give an error as capacity is 10 slice4 = slice4 [: 10 ] fmt . Println ( \"The length of slice4 is:\" , len ( slice4 )) fmt . Println ( \"The capacity of slice4 is:\" , cap ( slice4 )) for i := 5 ; i < 10 ; i ++ { slice4 [ i ] = i } fmt . Println () // printing slice4 fmt . Println ( \"slice4:\" , slice4 ) fmt . Println () // creating a new slice slice5 := slice4 [ 2 : 8 ] fmt . Println ( \"slice5:\" , slice5 ) fmt . Println () // two-D slice twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} fmt . Println ( \"Print out values of twoD slice...\" ) for i , slice := range twoD { fmt . Printf ( \"At index: %d of twoD, Value: %v\\n\" , i , slice ) for index , value := range slice { fmt . Printf ( \"Index: %d Value: %d\\n\" , index , value ) } fmt . Println () } }","title":"Full Code"},{"location":"basic/slice/#running-your-code","text":"Open your terminal and navigate to our folder code/basic/12_slice/ Once in the folder type the following command go run slice.go If there are no errors, you should get the output as: Output slice1: [] The length of slice1 is: 0 The capacity of slice1 is: 0 slice2: [1 2 3 4 5] The length of slice2 is: 5 The capacity of slice2 is: 5 slice3: [ ] The length of slice3 is: 5 The capacity of slice3 is: 5 slice4: [0 0 0 0 0] The length of slice4 is: 5 The capacity of slice4 is: 10 slice4: [0 1 2 3 4] Increasing the length of slice... The length of slice4 is: 10 The capacity of slice4 is: 10 slice4: [0 1 2 3 4 5 6 7 8 9] slice5: [2 3 4 5 6 7] Print out values of twoD slice... At index: 0 of twoD, Value: [3 4] Index: 0 Value: 3 Index: 1 Value: 4 At index: 1 of twoD, Value: [1 5] Index: 0 Value: 1 Index: 1 Value: 5 At index: 2 of twoD, Value: [9 2] Index: 0 Value: 9 Index: 1 Value: 2 At index: 3 of twoD, Value: [7 8] Index: 0 Value: 7 Index: 1 Value: 8 If for some reason your code isn't working, checkout the github repo or playground.","title":"Running your code"},{"location":"basic/slice/#github","text":"Github Repo","title":"Github"},{"location":"basic/slice/#golang-playground","text":"Golang Playground","title":"Golang Playground"},{"location":"basic/slice/#next","text":"In the next chapter we will study Maps .","title":"Next"},{"location":"basic/variables-constants/","text":"Declaring Variables & Constants . \u00b6 Objective \u00b6 Learn how to declare variables and constants. Variables \u00b6 Imagine you own a bookstore and you have to manage many books, you remove one book and store another book, now imagine bookstore to be variable, variable can store different values. Variables can be declared using the keyword var , besides using the keyword you also need to tell Go which data-type it belongs to. Since Go is a strictly typed language you need to declare the data-type. The syntax for declaring variable is: var variableName type Constant \u00b6 Constants are like locker, once you put a value in it, it cannot be changed, and as usual you need to declare the data type as well. const constName type = value Structure \u00b6 Navigate to our code folder code/basic/ For our program create a new folder '05_variables_constant' code/basic/05_variables_constant And lets create a file 'variables_constants.go' in it, finally the structure would look like this: code/basic/05_variables_constant/variables_constants.go Code \u00b6 Variables & Constants 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // Declaring variable \"name\" of type string 7 var name string 8 name = \"Octallium\" 9 // Printing out the value of \"name\" 10 fmt . Println ( \"The value of 'name' variable is:\" , name ) 11 12 // Declaring variable \"age\" of type int 13 var age int 14 age = 9 15 // Printing out the value of \"age\" 16 fmt . Println ( \"The value of 'age' variable is:\" , age ) 17 18 // Declaring constant \"SECRET_KEY\" of type string 19 const SECRET_KEY string = \"abc-123-xyz-098\" 20 // Printing out the value of \"SECRET_KEY\" 21 fmt . Println ( \"The value of 'SECRET_KEY' constant is:\" , SECRET_KEY ) 22 23 // Values of variables can be changed 24 name = \"Golang Handbook\" 25 fmt . Println ( \"Now the value of 'name' variable is:\" , name ) 26 27 age = 13 28 fmt . Println ( \"Now the value of 'age' variable is:\" , age ) 29 30 // SECRET_KEY = \"que-472-ert-383\" will throw an error as it is a constant 31 } Run Code \u00b6 Open your terminal and navigate to our folder code/basic/05_variables_constant/ Once in the folder type the following command go run variables_constants.go Output \u00b6 The value of 'name' variable is: Octallium The value of 'age' variable is: 9 The value of 'SECRET_KEY' constant is: abc-123-xyz-098 Now the value of 'name' variable is: Golang Handbook Now the value of 'age' variable is: 13 Github \u00b6 Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground \u00b6 You can also run the code at playground Golang Playground Code Review \u00b6 Lines 7 declares a new variable \"name\" of type \"string\" and on line 8 we give it the value of \"octallium\" Similarly on line 13 we declare a variable \"age\" of type int and on line 14 we give it the value of 9, note that there are no double quotes around 9 as it is of type int, strings have to be enclosed within double quotes. On line 19 we declare a constant of type string and give it a value, on line 30 if we try to change the value, the compiler will throw and error, try uncommenting the line and running the code. On line 24 & 27 we assign new values to variables and print them out. Next \u00b6 In the next section we will see the short hand method for declaring variables.","title":"05 Variables & Constants"},{"location":"basic/variables-constants/#declaring-czjqqkd0-variablesczjqqkd1-czjqqkd2-constantsczjqqkd3","text":"","title":"Declaring  Variables &amp;  Constants."},{"location":"basic/variables-constants/#objective","text":"Learn how to declare variables and constants.","title":"Objective"},{"location":"basic/variables-constants/#variables","text":"Imagine you own a bookstore and you have to manage many books, you remove one book and store another book, now imagine bookstore to be variable, variable can store different values. Variables can be declared using the keyword var , besides using the keyword you also need to tell Go which data-type it belongs to. Since Go is a strictly typed language you need to declare the data-type. The syntax for declaring variable is: var variableName type","title":"Variables"},{"location":"basic/variables-constants/#constant","text":"Constants are like locker, once you put a value in it, it cannot be changed, and as usual you need to declare the data type as well. const constName type = value","title":"Constant"},{"location":"basic/variables-constants/#structure","text":"Navigate to our code folder code/basic/ For our program create a new folder '05_variables_constant' code/basic/05_variables_constant And lets create a file 'variables_constants.go' in it, finally the structure would look like this: code/basic/05_variables_constant/variables_constants.go","title":"Structure"},{"location":"basic/variables-constants/#code","text":"Variables & Constants 1 package main 2 3 import \"fmt\" 4 5 func main () { 6 // Declaring variable \"name\" of type string 7 var name string 8 name = \"Octallium\" 9 // Printing out the value of \"name\" 10 fmt . Println ( \"The value of 'name' variable is:\" , name ) 11 12 // Declaring variable \"age\" of type int 13 var age int 14 age = 9 15 // Printing out the value of \"age\" 16 fmt . Println ( \"The value of 'age' variable is:\" , age ) 17 18 // Declaring constant \"SECRET_KEY\" of type string 19 const SECRET_KEY string = \"abc-123-xyz-098\" 20 // Printing out the value of \"SECRET_KEY\" 21 fmt . Println ( \"The value of 'SECRET_KEY' constant is:\" , SECRET_KEY ) 22 23 // Values of variables can be changed 24 name = \"Golang Handbook\" 25 fmt . Println ( \"Now the value of 'name' variable is:\" , name ) 26 27 age = 13 28 fmt . Println ( \"Now the value of 'age' variable is:\" , age ) 29 30 // SECRET_KEY = \"que-472-ert-383\" will throw an error as it is a constant 31 }","title":"Code"},{"location":"basic/variables-constants/#run-code","text":"Open your terminal and navigate to our folder code/basic/05_variables_constant/ Once in the folder type the following command go run variables_constants.go","title":"Run Code"},{"location":"basic/variables-constants/#output","text":"The value of 'name' variable is: Octallium The value of 'age' variable is: 9 The value of 'SECRET_KEY' constant is: abc-123-xyz-098 Now the value of 'name' variable is: Golang Handbook Now the value of 'age' variable is: 13","title":"Output"},{"location":"basic/variables-constants/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"basic/variables-constants/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"basic/variables-constants/#code-review","text":"Lines 7 declares a new variable \"name\" of type \"string\" and on line 8 we give it the value of \"octallium\" Similarly on line 13 we declare a variable \"age\" of type int and on line 14 we give it the value of 9, note that there are no double quotes around 9 as it is of type int, strings have to be enclosed within double quotes. On line 19 we declare a constant of type string and give it a value, on line 30 if we try to change the value, the compiler will throw and error, try uncommenting the line and running the code. On line 24 & 27 we assign new values to variables and print them out.","title":"Code Review"},{"location":"basic/variables-constants/#next","text":"In the next section we will see the short hand method for declaring variables.","title":"Next"},{"location":"getting-started/editor_ide/","text":"Setting Up Your Development Environment Using Text Editor's And IDE. \u00b6 There are many choices available, both free and paid, I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development. Editors \u00b6 Sublime Text Atom Visual Studio Code (Not to be confused with Visual Studio IDE) Vim IDE \u00b6 Goland By Jetbrains (Paid) Eclipse This list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list here I personally use Visual Studio Code , there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys. Installing 'Go' Plugins \u00b6 Just downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development. Plugins VS Code - Go - By Microsoft Atom - Go Plus","title":"Editors and IDE"},{"location":"getting-started/editor_ide/#setting-up-your-development-environment-using-text-editors-and-ide","text":"There are many choices available, both free and paid, I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development.","title":"Setting Up Your Development Environment Using Text Editor's And IDE."},{"location":"getting-started/editor_ide/#editors","text":"Sublime Text Atom Visual Studio Code (Not to be confused with Visual Studio IDE) Vim","title":"Editors"},{"location":"getting-started/editor_ide/#ide","text":"Goland By Jetbrains (Paid) Eclipse This list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list here I personally use Visual Studio Code , there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys.","title":"IDE"},{"location":"getting-started/editor_ide/#installing-go-plugins","text":"Just downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development. Plugins VS Code - Go - By Microsoft Atom - Go Plus","title":"Installing 'Go' Plugins"},{"location":"getting-started/installation/","text":"Installing Go \u00b6 How-To Install Go on your local machine \u00b6 Installing on Mac OSx: \u00b6 Installing on Mac OSx Installing Go on your mac is pretty straight forward, choose any one method: - A) Installing using package installer directly from golang.org OR B) Using Homebrew A) Installing using the package installer Package installer method is the simplest way to get you started, just download the .pkg file by clicking on this link and install it just as you would install any other program on your mac. The installer will automatically create everything for you including setting up your environment variables. Installer will automatically install it to usr/local/go directory After installing read \"Checking the installation\" section below to make sure everything works. B) Using Homebrew Before using this method, make sure you have homebrew installed, if it is not installed checkout this link and install it. Open your terminal and type the following: brew install go brew will automatically fetch the latest binaries and install it for you, make sure they are installed to usr/local/go directory Its now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go. Installing on FreeBSD & Linux: \u00b6 Installing on FreeBSD & Linux Download the archive from golang.org and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following: If you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command. Open terminal in downloaded directory and type: tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz After extracting set up GOPATH, refer the \"Setting up environment variables\" section. Installing on Windows: \u00b6 Installing on Windows Download the msi installer from golang.org and follow the prompts to intsall it. By default it is installed in c:\\Go all the environmental variables are set automatically by the installer. If you are using windows, I would highly recommend to install Git & Git Bash. Setting up environment variables: \u00b6 Setting up environment variables If you have installed Go using brew on OSx or on linux you need to set up GOPATH. A) If you are using bash, open and edit: ~/.bash_profile B) If you are using zsh, open and edit: ~/.zshrc and add the following: export PATH=$PATH:/usr/local/go/bin export GOROOT=/usr/local/go export GOPATH=$HOME/go export GOBIN=$HOME/go/bin save the file and restart the terminal or type A) For bash: source ~/.bash_profile B) For zsh: source ~/.zshrc Editing .bash_profile or .zshrc Follow the instructions to edit .bash_profile or .zshrc, open the terminal and type cd If you are using atom type atom .bash_profile or atom .zshrc Checking the installation: \u00b6 Checking the installation Open the terminal and type: echo $GOROOT it should give the output: usr/local/go For windows it should give output: c:\\Go You can also test using the following commands: go env go version","title":"Installation"},{"location":"getting-started/installation/#installing-go","text":"","title":"Installing Go"},{"location":"getting-started/installation/#czjqqkd0-how-toczjqqkd1-install-go-on-your-local-machine","text":"","title":" How-To Install Go on your local machine"},{"location":"getting-started/installation/#installing-on-mac-osx","text":"Installing on Mac OSx Installing Go on your mac is pretty straight forward, choose any one method: - A) Installing using package installer directly from golang.org OR B) Using Homebrew A) Installing using the package installer Package installer method is the simplest way to get you started, just download the .pkg file by clicking on this link and install it just as you would install any other program on your mac. The installer will automatically create everything for you including setting up your environment variables. Installer will automatically install it to usr/local/go directory After installing read \"Checking the installation\" section below to make sure everything works. B) Using Homebrew Before using this method, make sure you have homebrew installed, if it is not installed checkout this link and install it. Open your terminal and type the following: brew install go brew will automatically fetch the latest binaries and install it for you, make sure they are installed to usr/local/go directory Its now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go.","title":"Installing on Mac OSx:"},{"location":"getting-started/installation/#installing-on-freebsd-linux","text":"Installing on FreeBSD & Linux Download the archive from golang.org and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following: If you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command. Open terminal in downloaded directory and type: tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz After extracting set up GOPATH, refer the \"Setting up environment variables\" section.","title":"Installing on FreeBSD &amp; Linux:"},{"location":"getting-started/installation/#installing-on-windows","text":"Installing on Windows Download the msi installer from golang.org and follow the prompts to intsall it. By default it is installed in c:\\Go all the environmental variables are set automatically by the installer. If you are using windows, I would highly recommend to install Git & Git Bash.","title":"Installing on Windows:"},{"location":"getting-started/installation/#setting-up-environment-variables","text":"Setting up environment variables If you have installed Go using brew on OSx or on linux you need to set up GOPATH. A) If you are using bash, open and edit: ~/.bash_profile B) If you are using zsh, open and edit: ~/.zshrc and add the following: export PATH=$PATH:/usr/local/go/bin export GOROOT=/usr/local/go export GOPATH=$HOME/go export GOBIN=$HOME/go/bin save the file and restart the terminal or type A) For bash: source ~/.bash_profile B) For zsh: source ~/.zshrc Editing .bash_profile or .zshrc Follow the instructions to edit .bash_profile or .zshrc, open the terminal and type cd If you are using atom type atom .bash_profile or atom .zshrc","title":"Setting up environment variables:"},{"location":"getting-started/installation/#checking-the-installation","text":"Checking the installation Open the terminal and type: echo $GOROOT it should give the output: usr/local/go For windows it should give output: c:\\Go You can also test using the following commands: go env go version","title":"Checking the installation:"},{"location":"getting-started/why-go/","text":"Why Go ? \u00b6 Its really an interesting question, why should you learn and use Go ? This question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc. Go delivers some really exciting features such as: Easy and clear syntax. Small language with big standard library. Compiled language and fast compilation. Can be easily used cross platform. Its incredibly fast. Excellent concurrency. Good community support. While other languages also provide some of the above mentioned benefits, but Go really excels at them all together. You also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver. I will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.","title":"Why Go"},{"location":"getting-started/why-go/#why-go","text":"Its really an interesting question, why should you learn and use Go ? This question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc. Go delivers some really exciting features such as: Easy and clear syntax. Small language with big standard library. Compiled language and fast compilation. Can be easily used cross platform. Its incredibly fast. Excellent concurrency. Good community support. While other languages also provide some of the above mentioned benefits, but Go really excels at them all together. You also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver. I will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.","title":"Why Go ?"}]}