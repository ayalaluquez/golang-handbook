{
    "docs": [
        {
            "location": "/", 
            "text": "The 'Go' Programming Handbook\n\n\nA Guide To Understanding The \n Go\n Programming Language.\n\n\n\n\n\n\nIntroduction\n\n\nThe 'Go' handbook is an introductory book and is intended for beginners, the book doesn't make any assumption about your prior programming knowledge and tries to teach everything from scratch.\n\n\nAudience\n\n\nThis handbook is intended for beginners and new programmers, it can also be used as a reference by more experienced developers.\n\n\nMotivation\n\n\nAs a beginner I really struggled to find the right sources for learning 'Go' and many of the resources very not suited for new beginner or for a student who is entirely new to programming, so I decided to write a simple to understand 'beginners' book for learning 'Go'\n\n\nAbout Me\n\n\nHi, my name is \n Anil Kulkarni\n and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of Golang. When I am not coding you can usually find me watching movies \n\n\nCode Sample\n\n\nAll code samples will the in the form of following block:\n    \nfunc\n \nmain\n()\n \n{\n\n    \nfmt\n.\nPrintln\n(\nHello, World!\n)\n\n\n}\n\n\n\n\nPatreon\n\n\nAll the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable.\n\n\nAny support is genuinely appreciated, you can help the activity by becoming a patreon by clicking on the below link:\n\n\n\n\nWork In Progress\n\n\nAs you can see, this is a work in progress, I intend to complete the basic \n partial intermediate write-up by end of Oct, 18.\n\n\nTo Do\n\n\nA lots have to be done yet, here is a small lists to things to do in near future\n\n\n\n\n Complete basic tutorial consisting of language syntax by end of Oct, 18.\n\n\n Add partial intermediate material by end of Oct, 18.\n\n\n Add at least basic tutorial videos by end of Oct, 2018.\n\n\n Create pdf downloadable version.\n\n\n Create artwork for chapters.\n\n\n\n\nGet In Touch\n\n\nTo know more about me please visit \nwww.octallium.com\n.\n\n\nThe website is currently \n offline\n and under development, will update on this page when it is launched.\n\n\nI am reachable at \n\n\nTwitter Handle\n@octallium\nThanks,\n\n\nAnil Kulkarni", 
            "title": "Introduction"
        }, 
        {
            "location": "/#the-go-programming-handbook", 
            "text": "A Guide To Understanding The   Go  Programming Language.", 
            "title": "The 'Go' Programming Handbook"
        }, 
        {
            "location": "/#introduction", 
            "text": "The 'Go' handbook is an introductory book and is intended for beginners, the book doesn't make any assumption about your prior programming knowledge and tries to teach everything from scratch.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#audience", 
            "text": "This handbook is intended for beginners and new programmers, it can also be used as a reference by more experienced developers.", 
            "title": "Audience"
        }, 
        {
            "location": "/#motivation", 
            "text": "As a beginner I really struggled to find the right sources for learning 'Go' and many of the resources very not suited for new beginner or for a student who is entirely new to programming, so I decided to write a simple to understand 'beginners' book for learning 'Go'", 
            "title": "Motivation"
        }, 
        {
            "location": "/#about-me", 
            "text": "Hi, my name is   Anil Kulkarni  and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of Golang. When I am not coding you can usually find me watching movies", 
            "title": "About Me"
        }, 
        {
            "location": "/#code-sample", 
            "text": "All code samples will the in the form of following block:\n     func   main ()   { \n     fmt . Println ( Hello, World! )  }", 
            "title": "Code Sample"
        }, 
        {
            "location": "/#patreon", 
            "text": "All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable.  Any support is genuinely appreciated, you can help the activity by becoming a patreon by clicking on the below link:", 
            "title": "Patreon"
        }, 
        {
            "location": "/#work-in-progress", 
            "text": "As you can see, this is a work in progress, I intend to complete the basic   partial intermediate write-up by end of Oct, 18.", 
            "title": "Work In Progress"
        }, 
        {
            "location": "/#to-do", 
            "text": "A lots have to be done yet, here is a small lists to things to do in near future    Complete basic tutorial consisting of language syntax by end of Oct, 18.   Add partial intermediate material by end of Oct, 18.   Add at least basic tutorial videos by end of Oct, 2018.   Create pdf downloadable version.   Create artwork for chapters.", 
            "title": "To Do"
        }, 
        {
            "location": "/#get-in-touch", 
            "text": "To know more about me please visit  www.octallium.com .  The website is currently   offline  and under development, will update on this page when it is launched.  I am reachable at   Twitter Handle @octallium Thanks,  Anil Kulkarni", 
            "title": "Get In Touch"
        }, 
        {
            "location": "/getting-started/why-go/", 
            "text": "Why Go ?\n\n\n\n\n\nIts really an interesting question, why should you learn and use Go ? \n\n\nThis question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc.\n\n\nGo delivers some really exciting \n features\n such as:\n\n\n\n\n\n\nEasy and clear syntax.\n\n\n\n\n\n\nSmall language with big standard library.\n\n\n\n\n\n\nCompiled language and fast compilation.\n\n\n\n\n\n\nCan be easily used cross platform.\n\n\n\n\n\n\nIts incredibly fast.\n\n\n\n\n\n\nExcellent concurrency.\n\n\n\n\n\n\nGood community support.\n\n\n\n\n\n\nWhile other languages also provide some of the above mentioned benefits, but Go really excels at them all together.\n\n\nYou also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver.\n\n\nI will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.", 
            "title": "Why Go"
        }, 
        {
            "location": "/getting-started/why-go/#why-go", 
            "text": "Its really an interesting question, why should you learn and use Go ?   This question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc.  Go delivers some really exciting   features  such as:    Easy and clear syntax.    Small language with big standard library.    Compiled language and fast compilation.    Can be easily used cross platform.    Its incredibly fast.    Excellent concurrency.    Good community support.    While other languages also provide some of the above mentioned benefits, but Go really excels at them all together.  You also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver.  I will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.", 
            "title": "Why Go ?"
        }, 
        {
            "location": "/getting-started/installation/", 
            "text": "Installing Go\n\n\n\n\n\n How-To\n Install Go on your local machine\n\n\nInstalling on Mac OSx:\n\n\nInstalling on Mac OSx\nInstalling Go on your mac is pretty straight forward, choose any one method: -\nA) Installing using package installer directly from \ngolang.org\nOR\nB) Using Homebrew\nA) Installing using the package installer\nPackage installer method is the simplest way to get you started, just download the .pkg file by clicking on \nthis link\n and install it just as you would install any other program on your mac.\nThe installer will automatically create everything for you including setting up your environment variables.\nInstaller will automatically install it to\nusr/local/go directory\n\n\n\n\nAfter installing read \"Checking the installation\" section below to make sure everything works.\nB) Using Homebrew\nBefore using this method, make sure you have homebrew installed, if it is not installed checkout this \nlink\n and install it.\nOpen your terminal and type the following:\nbrew install go\n\n\n\n\nbrew will automatically fetch the latest binaries and install it for you, make sure they are installed to\nusr/local/go directory\n\n\n\n\nIts now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go.\nInstalling on FreeBSD \n Linux:\n\n\nInstalling on FreeBSD \n Linux\nDownload the archive from \ngolang.org\n and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following:\nIf you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command.\nOpen terminal in downloaded directory and type:\ntar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz\n\n\n\n\nAfter extracting set up GOPATH, refer the \"Setting up environment variables\" section.\nInstalling on Windows:\n\n\nInstalling on Windows\nDownload the msi installer from \ngolang.org\n and follow the prompts to intsall it.\nBy default it is installed in\nc:\\Go\n\n\n\n\nall the environmental variables are set automatically by the installer.\nIf you are using windows, I would highly recommend to install Git \n Git Bash.\nSetting up environment variables:\n\n\nSetting up environment variables\nIf you have installed Go using brew on OSx or on linux you need to set up GOPATH.\nA) If you are using bash, open and edit:\n~/.bash_profile\n\n\n\n\nB) If you are using zsh, open and edit:\n~/.zshrc\n\n\n\n\nand add the following:\nexport PATH=$PATH:/usr/local/go/bin\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport GOBIN=$HOME/go/bin\n\n\n\n\nsave the file and restart the terminal or type\nA) For bash:\nsource ~/.bash_profile\n\n\n\n\nB) For zsh:\nsource ~/.zshrc\n\n\n\n\nEditing .bash_profile or .zshrc\nFollow the instructions to edit .bash_profile or .zshrc, open the terminal and type\ncd\n\n\n\n\nIf you are using atom type\natom .bash_profile\n\n\n\n\nor\natom .zshrc\n\n\n\n\nChecking the installation:\n\n\nChecking the installation\nOpen the terminal and type:\necho $GOROOT\n\n\n\n\nit should give the output:\nusr/local/go\n\n\n\n\nFor windows it should give output:\nc:\\Go\n\n\n\n\nYou can also test using the following commands:\ngo env\ngo version", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/installation/#installing-go", 
            "text": "", 
            "title": "Installing Go"
        }, 
        {
            "location": "/getting-started/installation/#czjqqkd0-how-toczjqqkd1-install-go-on-your-local-machine", 
            "text": "", 
            "title": " How-To Install Go on your local machine"
        }, 
        {
            "location": "/getting-started/installation/#installing-on-mac-osx", 
            "text": "Installing on Mac OSx Installing Go on your mac is pretty straight forward, choose any one method: - A) Installing using package installer directly from  golang.org OR B) Using Homebrew A) Installing using the package installer Package installer method is the simplest way to get you started, just download the .pkg file by clicking on  this link  and install it just as you would install any other program on your mac. The installer will automatically create everything for you including setting up your environment variables. Installer will automatically install it to usr/local/go directory  After installing read \"Checking the installation\" section below to make sure everything works. B) Using Homebrew Before using this method, make sure you have homebrew installed, if it is not installed checkout this  link  and install it. Open your terminal and type the following: brew install go  brew will automatically fetch the latest binaries and install it for you, make sure they are installed to usr/local/go directory  Its now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go.", 
            "title": "Installing on Mac OSx:"
        }, 
        {
            "location": "/getting-started/installation/#installing-on-freebsd-linux", 
            "text": "Installing on FreeBSD   Linux Download the archive from  golang.org  and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following: If you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command. Open terminal in downloaded directory and type: tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz  After extracting set up GOPATH, refer the \"Setting up environment variables\" section.", 
            "title": "Installing on FreeBSD &amp; Linux:"
        }, 
        {
            "location": "/getting-started/installation/#installing-on-windows", 
            "text": "Installing on Windows Download the msi installer from  golang.org  and follow the prompts to intsall it. By default it is installed in c:\\Go  all the environmental variables are set automatically by the installer. If you are using windows, I would highly recommend to install Git   Git Bash.", 
            "title": "Installing on Windows:"
        }, 
        {
            "location": "/getting-started/installation/#setting-up-environment-variables", 
            "text": "Setting up environment variables If you have installed Go using brew on OSx or on linux you need to set up GOPATH. A) If you are using bash, open and edit: ~/.bash_profile  B) If you are using zsh, open and edit: ~/.zshrc  and add the following: export PATH=$PATH:/usr/local/go/bin\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport GOBIN=$HOME/go/bin  save the file and restart the terminal or type A) For bash: source ~/.bash_profile  B) For zsh: source ~/.zshrc  Editing .bash_profile or .zshrc Follow the instructions to edit .bash_profile or .zshrc, open the terminal and type cd  If you are using atom type atom .bash_profile  or atom .zshrc", 
            "title": "Setting up environment variables:"
        }, 
        {
            "location": "/getting-started/installation/#checking-the-installation", 
            "text": "Checking the installation Open the terminal and type: echo $GOROOT  it should give the output: usr/local/go  For windows it should give output: c:\\Go  You can also test using the following commands: go env\ngo version", 
            "title": "Checking the installation:"
        }, 
        {
            "location": "/getting-started/editor_ide/", 
            "text": "Setting Up Your Development Environment Using Text Editor's And IDE.\n\n\n\n\n\nThere are many choices available, both free and paid, I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development.\n\n\nEditors\n\n\n\n\nSublime Text\n\n\nAtom\n\n\nVisual Studio Code (Not to be confused with Visual Studio IDE)\n\n\nVim\n\n\n\n\nIDE\n\n\n\n\nGoland By Jetbrains (Paid)\n\n\nEclipse\n\n\n\n\nThis list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list \nhere\n\n\nI personally use \n Visual Studio Code\n, there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys.\n\n\nInstalling 'Go' Plugins\n\n\nJust downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development.\n\n\nPlugins\n\n\n\n\nVS Code - \nGo - By Microsoft\n\n\nAtom - \nGo Plus", 
            "title": "Editors and IDE"
        }, 
        {
            "location": "/getting-started/editor_ide/#setting-up-your-development-environment-using-text-editors-and-ide", 
            "text": "There are many choices available, both free and paid, I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development.", 
            "title": "Setting Up Your Development Environment Using Text Editor's And IDE."
        }, 
        {
            "location": "/getting-started/editor_ide/#editors", 
            "text": "Sublime Text  Atom  Visual Studio Code (Not to be confused with Visual Studio IDE)  Vim", 
            "title": "Editors"
        }, 
        {
            "location": "/getting-started/editor_ide/#ide", 
            "text": "Goland By Jetbrains (Paid)  Eclipse   This list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list  here  I personally use   Visual Studio Code , there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys.", 
            "title": "IDE"
        }, 
        {
            "location": "/getting-started/editor_ide/#installing-go-plugins", 
            "text": "Just downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development.  Plugins   VS Code -  Go - By Microsoft  Atom -  Go Plus", 
            "title": "Installing 'Go' Plugins"
        }, 
        {
            "location": "/basic/basic/", 
            "text": "Basic\n\n\n\n\n\nIn this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs.\n\n\nStart with the next section to write a \n \"Hello, World!\"\n program in Go.", 
            "title": "Basic Introduction"
        }, 
        {
            "location": "/basic/basic/#basic", 
            "text": "In this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs.  Start with the next section to write a   \"Hello, World!\"  program in Go.", 
            "title": "Basic"
        }, 
        {
            "location": "/basic/hello-world/", 
            "text": "Writing a \n \"Hello, World!\"\n program.\n\n\n\n\n\nObjective\n\n\nWrite a program which prints \"Hello, World!\" on the screen.\n\n\nStructure\n\n\nLet's create a folder called 'code' anywhere on your machine and we will put all our Go code in it.\nInside the 'code' folder lets create one more folder for basic tutorials\n\n\ncode/basic/\n\n\n\n\n\nFor our first program create a new folder '01_hello_world'\n\n\ncode/basic/01_hello_world\n\n\n\n\n\nAnd lets create a file 'hello_world.go' in it, finally the structure would look like this:\n\n\ncode/basic/01_hello_world/hello_world.go\n\n\n\n\n\nCode\n\n\nWrite the code as shown below, while you can simply copy and paste, its better if you write everything on your own. \n\n\nDon't worry if you code won't work, only then copy and paste the code \n\n\nHello World\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \nfunc\n \nmain\n()\n \n{\n\n\n6\n   \nfmt\n.\nPrintln\n(\nHello, World!\n)\n\n\n7\n \n}\n\n\n\n\nRunning your code\n\n\nOpen your terminal and navigate to our folder\n\n\ncode/01_hello_world/hello_world.go\n\n\n\n\n\nOnce in the folder type the following command\n\n\ngo run hello_world.go\n\n\n\n\n\nIf there are no errors, you should get the output as:\n\n\nOutput\nHello, World!\n\n\n\n\nIf for some reason your code isn't working, checkout the golang playground or github links in the following section.\n\n\nClick on the below link for \nGithub Repo\n\n\nGithub Repo\n\n\nThat's it, \n Congratulations\n ! You just wrote your first Go program.\n\n\nGolang Playground\n\n\nGolang has a online sandbox environment for running your Go programs, which can be accessed on \nGolang Playground\n\n\nI will be posting all the playground links for all the code we write, this way you can run them online and compare with your code.\n\n\nHello World On Playground\nClick on the below link:\nHello World\nNext\n\n\nIf you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet !\n\n\nIn the next section we will understand everything line-by-line.", 
            "title": "01 Hello World"
        }, 
        {
            "location": "/basic/hello-world/#writing-a-czjqqkd0-hello-worldczjqqkd1-program", 
            "text": "", 
            "title": "Writing a  \"Hello, World!\" program."
        }, 
        {
            "location": "/basic/hello-world/#objective", 
            "text": "Write a program which prints \"Hello, World!\" on the screen.", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/hello-world/#structure", 
            "text": "Let's create a folder called 'code' anywhere on your machine and we will put all our Go code in it.\nInside the 'code' folder lets create one more folder for basic tutorials  code/basic/  For our first program create a new folder '01_hello_world'  code/basic/01_hello_world  And lets create a file 'hello_world.go' in it, finally the structure would look like this:  code/basic/01_hello_world/hello_world.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/hello-world/#code", 
            "text": "Write the code as shown below, while you can simply copy and paste, its better if you write everything on your own.   Don't worry if you code won't work, only then copy and paste the code   Hello World 1   package   main  2  3   import   fmt  4  5   func   main ()   {  6     fmt . Println ( Hello, World! )  7   }", 
            "title": "Code"
        }, 
        {
            "location": "/basic/hello-world/#running-your-code", 
            "text": "Open your terminal and navigate to our folder  code/01_hello_world/hello_world.go  Once in the folder type the following command  go run hello_world.go  If there are no errors, you should get the output as:  Output Hello, World!  If for some reason your code isn't working, checkout the golang playground or github links in the following section.  Click on the below link for  Github Repo  Github Repo  That's it,   Congratulations  ! You just wrote your first Go program.", 
            "title": "Running your code"
        }, 
        {
            "location": "/basic/hello-world/#golang-playground", 
            "text": "Golang has a online sandbox environment for running your Go programs, which can be accessed on  Golang Playground  I will be posting all the playground links for all the code we write, this way you can run them online and compare with your code.  Hello World On Playground Click on the below link: Hello World", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/hello-world/#next", 
            "text": "If you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet !  In the next section we will understand everything line-by-line.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/hello-world-understand/", 
            "text": "Understanding \n \"Hello, World!\"\n Program.\n\n\n\n\n\nObjective\n\n\nUnderstanding the Hello World program line-by-line\n\n\nCode\n\n\nHello World\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \nfunc\n \nmain\n()\n \n{\n\n\n6\n   \nfmt\n.\nPrintln\n(\nHello, World!\n)\n\n\n7\n \n}\n\n\n\n\nCode Review\n\n\nNow its time to dive in and understand the code\n\n\nLine 1 - \n\n\npackage main\n\n\n\n\n\nDeclares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to \n Packages\n in future, for now remmember all files at your project directory level belong to package main.\n\n\nLine 3 -\n\n\nimport\n \nfmt\n\n\n\n\n\n\nHere we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\".\n\n\n\"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts.\n\n\nDocumentation for \"fmt\" can be found \nhere\n\n\n\"fmt\" exposes a lot of functionality to us which we use in the line 6.\n\n\nLine 5 - \n\n\nfunc main () {\n\n\n\n\n\nThis is the start or entry point for your code, the compiler will automatically check if \n func main()\n is present or not and start the program from there, it is generally mentioned as\n\n\nmain.main\n[package].[function]\n\n\n\n\n\nmeans \"main\" function in \"main\" package\n\n\nLine 6 - \n\n\nfmt.Println(\nHello, World!)\n\n\n\n\n\nHere we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen.\n\n\nNow, you can see how we can use functionality written in packages and use it for our ease.\n\n\nLine 7 - \n\n\n}\n\n\n\n\n\nCloses the main function, this symbolizes that main function ends here.\n\n\nAside\n\n\nWow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code.\n\n\nAs a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand.\n\n\nLearning code takes patience and persistance, fasten your seat belts and keep learning.", 
            "title": "02 Understanding Hello World"
        }, 
        {
            "location": "/basic/hello-world-understand/#understanding-czjqqkd0-hello-worldczjqqkd1-program", 
            "text": "", 
            "title": "Understanding  \"Hello, World!\" Program."
        }, 
        {
            "location": "/basic/hello-world-understand/#objective", 
            "text": "Understanding the Hello World program line-by-line", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/hello-world-understand/#code", 
            "text": "Hello World 1   package   main  2  3   import   fmt  4  5   func   main ()   {  6     fmt . Println ( Hello, World! )  7   }", 
            "title": "Code"
        }, 
        {
            "location": "/basic/hello-world-understand/#code-review", 
            "text": "Now its time to dive in and understand the code  Line 1 -   package main  Declares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to   Packages  in future, for now remmember all files at your project directory level belong to package main.  Line 3 -  import   fmt   Here we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\".  \"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts.  Documentation for \"fmt\" can be found  here  \"fmt\" exposes a lot of functionality to us which we use in the line 6.  Line 5 -   func main () {  This is the start or entry point for your code, the compiler will automatically check if   func main()  is present or not and start the program from there, it is generally mentioned as  main.main\n[package].[function]  means \"main\" function in \"main\" package  Line 6 -   fmt.Println( Hello, World!)  Here we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen.  Now, you can see how we can use functionality written in packages and use it for our ease.  Line 7 -   }  Closes the main function, this symbolizes that main function ends here.", 
            "title": "Code Review"
        }, 
        {
            "location": "/basic/hello-world-understand/#aside", 
            "text": "Wow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code.  As a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand.  Learning code takes patience and persistance, fasten your seat belts and keep learning.", 
            "title": "Aside"
        }, 
        {
            "location": "/basic/add-comment/", 
            "text": "How To Add A \n Comment\n.\n\n\n\n\n\nObjective\n\n\nLearn how to add a comment in the code. \n\n\nRequirement\n\n\nAdding comments is a very handy way of adding documentation to your code, it serves as a tool to let others know what you have written and makes navigating your code an easy task.\n\n\nGo has a specific format for adding comments and recommends adding comments wherever it makes sense.\n\n\nCode\n\n\nAdding a comment is pretty easy\n\n\n// This is a comment\n\n\n\n\n\nThe compiler ignores the comment and runs your code, however as humans for us to remmember what we have written and for others to understand writing comments would make sense.\n\n\nHello World With Comment\n\n\nHello World\n1\n \n// Declaring that the file belongs to the main package\n\n\n2\n \npackage\n \nmain\n\n\n3\n\n\n4\n \n// Importing the package \nfmt\n\n\n5\n \nimport\n \nfmt\n\n\n6\n\n\n7\n \n// Declaring the main function\n\n\n8\n \nfunc\n \nmain\n()\n \n{\n\n\n9\n   \n\n10\n \n// Printing Hello World to the standard output\n\n\n11\n \nfmt\n.\nPrintln\n(\nHello, World!\n)\n\n\n12\n \n}\n\n\n13\n \n// main function ends\n\n\n\n\nGolang Playground\n\n\nHello World With Comment\nClick on the below link:\nHello World With Comments\nNext\n\n\nNow that you know how to write comments, lets start with writing code with beautiful comments, but before we actually start writing more code there is one small step, we need to understand \n Data Types\n\n\nClick on the next section to understand basic data types in Go.", 
            "title": "03 Adding a Comment"
        }, 
        {
            "location": "/basic/add-comment/#how-to-add-a-czjqqkd0-commentczjqqkd1", 
            "text": "", 
            "title": "How To Add A  Comment."
        }, 
        {
            "location": "/basic/add-comment/#objective", 
            "text": "Learn how to add a comment in the code.", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/add-comment/#requirement", 
            "text": "Adding comments is a very handy way of adding documentation to your code, it serves as a tool to let others know what you have written and makes navigating your code an easy task.  Go has a specific format for adding comments and recommends adding comments wherever it makes sense.", 
            "title": "Requirement"
        }, 
        {
            "location": "/basic/add-comment/#code", 
            "text": "Adding a comment is pretty easy  // This is a comment  The compiler ignores the comment and runs your code, however as humans for us to remmember what we have written and for others to understand writing comments would make sense.", 
            "title": "Code"
        }, 
        {
            "location": "/basic/add-comment/#hello-world-with-comment", 
            "text": "Hello World 1   // Declaring that the file belongs to the main package  2   package   main  3  4   // Importing the package  fmt  5   import   fmt  6  7   // Declaring the main function  8   func   main ()   {  9     10   // Printing Hello World to the standard output  11   fmt . Println ( Hello, World! )  12   }  13   // main function ends", 
            "title": "Hello World With Comment"
        }, 
        {
            "location": "/basic/add-comment/#golang-playground", 
            "text": "Hello World With Comment Click on the below link: Hello World With Comments", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/add-comment/#next", 
            "text": "Now that you know how to write comments, lets start with writing code with beautiful comments, but before we actually start writing more code there is one small step, we need to understand   Data Types  Click on the next section to understand basic data types in Go.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/basic-data-types/", 
            "text": "Understanding The Basic \n Data Types\n In Go\n\n\n\n\n\nObjective\n\n\nLearn the basic data types in Go\n\n\nData Types\n\n\nFor a new programmer, data types sounds geeky enough, but really there isn't much to it, lets see below how it works out.\n\n\nIf I ask you, what's your name ? Yours answer would be something like this:\n\n\nMy name is Bond, James Bond\n\n\n\n\n\nThis is nothing but data type of \n string\n, in plain english string is nothing but a collection of characters.\n\n\nNow, if I ask you, how old are you ? You would say something like:\n\n\n28\n\n\n\n\n\nSince age is a number or a digit, it belongs to the data type of \n int\n , int stands for integer which means whole numbers without decimals.\n\n\nLet's get more curious and ask James Bond, you have a nice watch, how much did it cost ? He would say:\n\n\n$ \n105\n.23\n\n\n\n\n\nNow you see nice it has a decimal value, it is called as a data type of \n float\n, float is just another fancy way of saying, its a digit with decimal values.\n\n\nJames Bond is getting irritated with our question, so lets ask a final question and wrap it up, lets ask, is it true that you are licensed to kill ? He would say\n\n\nTrue\n\n\n\n\n\nTrue is neither a digit or a string, its a condition, so it belongs to the data type of \n boolean\n, boolean values can be only True or False.\n\n\nIn reality the above data types are of very basic types, Go has much more to it, also Go has different varieties of int, float, etc. But for now lets take it easy, we will see different data types as we progress with our code.\n\n\nNext\n\n\nSo now you know what are the basic data types in Go, in the next section we will start using them by declaring something called as \n variables\n and \n constants\n.", 
            "title": "04 Understanding Data Types"
        }, 
        {
            "location": "/basic/basic-data-types/#understanding-the-basic-czjqqkd0-data-typesczjqqkd1-in-go", 
            "text": "", 
            "title": "Understanding The Basic  Data Types In Go"
        }, 
        {
            "location": "/basic/basic-data-types/#objective", 
            "text": "Learn the basic data types in Go", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/basic-data-types/#data-types", 
            "text": "For a new programmer, data types sounds geeky enough, but really there isn't much to it, lets see below how it works out.  If I ask you, what's your name ? Yours answer would be something like this:  My name is Bond, James Bond  This is nothing but data type of   string , in plain english string is nothing but a collection of characters.  Now, if I ask you, how old are you ? You would say something like:  28  Since age is a number or a digit, it belongs to the data type of   int  , int stands for integer which means whole numbers without decimals.  Let's get more curious and ask James Bond, you have a nice watch, how much did it cost ? He would say:  $  105 .23  Now you see nice it has a decimal value, it is called as a data type of   float , float is just another fancy way of saying, its a digit with decimal values.  James Bond is getting irritated with our question, so lets ask a final question and wrap it up, lets ask, is it true that you are licensed to kill ? He would say  True  True is neither a digit or a string, its a condition, so it belongs to the data type of   boolean , boolean values can be only True or False.  In reality the above data types are of very basic types, Go has much more to it, also Go has different varieties of int, float, etc. But for now lets take it easy, we will see different data types as we progress with our code.", 
            "title": "Data Types"
        }, 
        {
            "location": "/basic/basic-data-types/#next", 
            "text": "So now you know what are the basic data types in Go, in the next section we will start using them by declaring something called as   variables  and   constants .", 
            "title": "Next"
        }, 
        {
            "location": "/basic/variables-constants/", 
            "text": "Declaring \n Variables\n \n \n Constants\n.\n\n\n\n\n\nObjective\n\n\nLearn how to declare variables and constants.\n\n\nVariables\n\n\nImagine you own a bookstore and you have to manage many books, you remove one book and store another book, now imagine bookstore to be variable, variable can store different values.\n\n\nVariables can be declared using the keyword \n var\n, besides using the keyword you also need to tell Go which data-type it belongs to. Since Go is a strictly typed language you need to declare the data-type.\n\n\nThe syntax for declaring variable is:\n\n\nvar variableName type\n\n\n\n\n\nConstant\n\n\nConstants are like locker, once you put a value in it, it cannot be changed, and as usual you need to declare the data type as well.\n\n\nconst constName type = value\n\n\n\n\n\nStructure\n\n\nNavigate to our code folder\n\n\ncode/basic/\n\n\n\n\n\nFor our program create a new folder '05_variables_constant'\n\n\ncode/basic/05_variables_constant\n\n\n\n\n\nAnd lets create a file 'variables_constants.go' in it, finally the structure would look like this:\n\n\ncode/basic/05_variables_constant/variables_constants.go\n\n\n\n\n\nCode\n\n\nVariables \n Constants\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \nfunc\n \nmain\n()\n \n{\n\n\n6\n   \n// Declaring variable \nname\n of type string\n\n\n7\n   \nvar\n \nname\n \nstring\n\n\n8\n   \nname\n \n=\n \nOctallium\n\n\n9\n   \n// Printing out the value of \nname\n\n\n10\n   \nfmt\n.\nPrintln\n(\nThe value of \nname\n variable is:\n,\n \nname\n)\n\n\n11\n\n\n12\n  \n// Declaring variable \nage\n of type int\n\n\n13\n  \nvar\n \nage\n \nint\n\n\n14\n  \nage\n \n=\n \n9\n\n\n15\n  \n// Printing out the value of \nage\n\n\n16\n  \nfmt\n.\nPrintln\n(\nThe value of \nage\n variable is:\n,\n \nage\n)\n\n\n17\n  \n\n18\n  \n// Declaring constant \nSECRET_KEY\n of type string\n\n\n19\n  \nconst\n \nSECRET_KEY\n \nstring\n \n=\n \nabc-123-xyz-098\n\n\n20\n  \n// Printing out the value of \nSECRET_KEY\n\n\n21\n  \nfmt\n.\nPrintln\n(\nThe value of \nSECRET_KEY\n constant is:\n,\n \nSECRET_KEY\n)\n\n\n22\n\n\n23\n  \n// Values of variables can be changed\n\n\n24\n  \nname\n \n=\n \nGolang Handbook\n\n\n25\n  \nfmt\n.\nPrintln\n(\nNow the value of \nname\n variable is:\n,\n \nname\n)\n\n\n26\n\n\n27\n  \nage\n \n=\n \n13\n\n\n28\n  \nfmt\n.\nPrintln\n(\nNow the value of \nage\n variable is:\n,\n \nage\n)\n\n\n29\n\n\n30\n  \n// SECRET_KEY = \nque-472-ert-383\n will throw an error as it is a constant\n\n\n31\n \n}\n\n\n\n\nGithub\n\n\nJust in case you have some errors with your code, you can check out the code at github repo\n\n\nGithub Repo\n\n\nGolang Playground\n\n\nYou can also run the code at playground\n\n\nGolang Playground\n\n\nCode Review\n\n\nLines 7 declares a new variable \"name\" of type \"string\" and on line 8 we give it the value of \"octallium\"\n\n\nSimilarly on line 13 we declare a variable \"age\" of type int and on line 14 we give it the value of 9, note that there are no double quotes around 9 as it is of type int, strings have to be enclosed within double quotes.\n\n\nOn line 19 we declare a constant of type string and give it a value, on line 30 if we try to change the value, the compiler will throw and error, try uncommenting the line and running the code.\n\n\nOn line 24 \n 27 we assign new values to variables and print them out.\n\n\nNext\n\n\nIn the next section we will see the short hand method for declaring variables.", 
            "title": "05 Variables & Constants"
        }, 
        {
            "location": "/basic/variables-constants/#declaring-czjqqkd0-variablesczjqqkd1-czjqqkd2-constantsczjqqkd3", 
            "text": "", 
            "title": "Declaring  Variables &amp;  Constants."
        }, 
        {
            "location": "/basic/variables-constants/#objective", 
            "text": "Learn how to declare variables and constants.", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/variables-constants/#variables", 
            "text": "Imagine you own a bookstore and you have to manage many books, you remove one book and store another book, now imagine bookstore to be variable, variable can store different values.  Variables can be declared using the keyword   var , besides using the keyword you also need to tell Go which data-type it belongs to. Since Go is a strictly typed language you need to declare the data-type.  The syntax for declaring variable is:  var variableName type", 
            "title": "Variables"
        }, 
        {
            "location": "/basic/variables-constants/#constant", 
            "text": "Constants are like locker, once you put a value in it, it cannot be changed, and as usual you need to declare the data type as well.  const constName type = value", 
            "title": "Constant"
        }, 
        {
            "location": "/basic/variables-constants/#structure", 
            "text": "Navigate to our code folder  code/basic/  For our program create a new folder '05_variables_constant'  code/basic/05_variables_constant  And lets create a file 'variables_constants.go' in it, finally the structure would look like this:  code/basic/05_variables_constant/variables_constants.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/variables-constants/#code", 
            "text": "Variables   Constants 1   package   main  2  3   import   fmt  4  5   func   main ()   {  6     // Declaring variable  name  of type string  7     var   name   string  8     name   =   Octallium  9     // Printing out the value of  name  10     fmt . Println ( The value of  name  variable is: ,   name )  11  12    // Declaring variable  age  of type int  13    var   age   int  14    age   =   9  15    // Printing out the value of  age  16    fmt . Println ( The value of  age  variable is: ,   age )  17    18    // Declaring constant  SECRET_KEY  of type string  19    const   SECRET_KEY   string   =   abc-123-xyz-098  20    // Printing out the value of  SECRET_KEY  21    fmt . Println ( The value of  SECRET_KEY  constant is: ,   SECRET_KEY )  22  23    // Values of variables can be changed  24    name   =   Golang Handbook  25    fmt . Println ( Now the value of  name  variable is: ,   name )  26  27    age   =   13  28    fmt . Println ( Now the value of  age  variable is: ,   age )  29  30    // SECRET_KEY =  que-472-ert-383  will throw an error as it is a constant  31   }", 
            "title": "Code"
        }, 
        {
            "location": "/basic/variables-constants/#github", 
            "text": "Just in case you have some errors with your code, you can check out the code at github repo  Github Repo", 
            "title": "Github"
        }, 
        {
            "location": "/basic/variables-constants/#golang-playground", 
            "text": "You can also run the code at playground  Golang Playground", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/variables-constants/#code-review", 
            "text": "Lines 7 declares a new variable \"name\" of type \"string\" and on line 8 we give it the value of \"octallium\"  Similarly on line 13 we declare a variable \"age\" of type int and on line 14 we give it the value of 9, note that there are no double quotes around 9 as it is of type int, strings have to be enclosed within double quotes.  On line 19 we declare a constant of type string and give it a value, on line 30 if we try to change the value, the compiler will throw and error, try uncommenting the line and running the code.  On line 24   27 we assign new values to variables and print them out.", 
            "title": "Code Review"
        }, 
        {
            "location": "/basic/variables-constants/#next", 
            "text": "In the next section we will see the short hand method for declaring variables.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/shorthand-declaration/", 
            "text": "Shorthand\n Declaration Of Variables.\n\n\n\n\n\nObjective\n\n\nLearn how to declare variables using the shorthand method.\n\n\nDeclaration\n\n\nGo ships with a smart compiler, it can detect the data type and automatically assign it to variables, using short declaration is very widely used in Go, with this method you can create variables on the fly, no need for prior declaration.\n\n\nGeneral syntax\n\n\nvariableName := value\n\n\n\n\n\nIt is also called as inference type declaration, meaning that the variable type is \"inferred\" from the value. This method offers various benefits such as compiler can choose the right data type and much more which we will explore as we write more code.\n\n\nStructure\n\n\nNavigate to our code folder\n\n\ncode/basic/\n\n\n\n\n\nFor our program create a new folder '06_shorthand_declaration'\n\n\ncode/basic/06_shorthand_declaration\n\n\n\n\n\nAnd lets create a file 'shorthand_declaration.go' in it, finally the structure would look like this:\n\n\ncode/basic/06_shorthand_declaration/shorthand_declaration.go\n\n\n\n\n\nCode\n\n\nShorthand Declaration\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n\n4\n \nfunc\n \nmain\n()\n \n{\n\n\n5\n   \n// declaring integer\n\n\n6\n   \nnum\n \n:=\n \n12\n\n\n7\n   \nfmt\n.\nPrintf\n(\nThe type of variable \nnum\n is: %T.\\n\n,\n \nnum\n)\n\n\n8\n\n\n9\n   \n// declaring float\n\n\n10\n  \ndecimal\n \n:=\n \n15.45\n\n\n11\n  \nfmt\n.\nPrintf\n(\nThe type of variable \ndecimal\n is: %T.\\n\n,\n \ndecimal\n)\n\n\n12\n\n\n13\n  \n// declaring string\n\n\n14\n  \nname\n \n:=\n \nOctallium\n\n\n15\n  \nfmt\n.\nPrintf\n(\nThe type of variable \nname\n is : %T.\\n\n,\n \nname\n)\n\n\n16\n \n}\n\n\n\n\nOutput\n\n\nThe type of variable \nnum\n is: int.\nThe type of variable \ndecimal\n is: float64.\nThe type of variable \nname\n is : string.\n\n\n\n\n\nCode Review\n\n\nOn line 6, 10 \n 14 we declare a new variable\n\n\nnum := 12\ndecimal := 15.45\nname := \nOctallium\n\n\n\n\n\n\nTo check the data type we use a special format output function\n\n\nfmt.Printf()\n\n\n\n\n\nNote, in the earlier examples we had used\n\n\nfmt.Println()\n\n\n\n\n\nOn line 7, 11 \n 15, we print out the data type, to check the data type we use a special character \"%T\", which acts as a placeholder and represent the data \"Type\", it is followed by the variable name.\n\n\nfmt.Printf(\nThe type of variable \nnum\n is: %T.\\n\n, num)\nfmt.Printf(\nThe type of variable \ndecimal\n is: %T.\\n\n, decimal)\nfmt.Printf(\nThe type of variable \nname\n is : %T.\\n\n, name)\n\n\n\n\n\nIf you don't understand the print statements, no worries, we will be having a dedicated section on formatting output, for now type everything as in the code above and make sure it runs.\n\n\nGithub\n\n\nJust in case you have some errors with your code, you can check out the code at github repo\n\n\nGithub Repo\n\n\nGolang Playground\n\n\nYou can also run the code at playground\n\n\nGolang Playground\n\n\nNext\n\n\nIn the next chapter we will see about \n if/else\n condition, don't worry if its becoming too geeky, keep up with the code and in no time you will get the hang of it.", 
            "title": "06 Shorthand Declaration"
        }, 
        {
            "location": "/basic/shorthand-declaration/#czjqqkd0-shorthandczjqqkd1-declaration-of-variables", 
            "text": "", 
            "title": " Shorthand Declaration Of Variables."
        }, 
        {
            "location": "/basic/shorthand-declaration/#objective", 
            "text": "Learn how to declare variables using the shorthand method.", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/shorthand-declaration/#declaration", 
            "text": "Go ships with a smart compiler, it can detect the data type and automatically assign it to variables, using short declaration is very widely used in Go, with this method you can create variables on the fly, no need for prior declaration.  General syntax  variableName := value  It is also called as inference type declaration, meaning that the variable type is \"inferred\" from the value. This method offers various benefits such as compiler can choose the right data type and much more which we will explore as we write more code.", 
            "title": "Declaration"
        }, 
        {
            "location": "/basic/shorthand-declaration/#structure", 
            "text": "Navigate to our code folder  code/basic/  For our program create a new folder '06_shorthand_declaration'  code/basic/06_shorthand_declaration  And lets create a file 'shorthand_declaration.go' in it, finally the structure would look like this:  code/basic/06_shorthand_declaration/shorthand_declaration.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/shorthand-declaration/#code", 
            "text": "Shorthand Declaration 1   package   main  2  3   import   fmt  4   func   main ()   {  5     // declaring integer  6     num   :=   12  7     fmt . Printf ( The type of variable  num  is: %T.\\n ,   num )  8  9     // declaring float  10    decimal   :=   15.45  11    fmt . Printf ( The type of variable  decimal  is: %T.\\n ,   decimal )  12  13    // declaring string  14    name   :=   Octallium  15    fmt . Printf ( The type of variable  name  is : %T.\\n ,   name )  16   }", 
            "title": "Code"
        }, 
        {
            "location": "/basic/shorthand-declaration/#output", 
            "text": "The type of variable  num  is: int.\nThe type of variable  decimal  is: float64.\nThe type of variable  name  is : string.", 
            "title": "Output"
        }, 
        {
            "location": "/basic/shorthand-declaration/#code-review", 
            "text": "On line 6, 10   14 we declare a new variable  num := 12\ndecimal := 15.45\nname :=  Octallium   To check the data type we use a special format output function  fmt.Printf()  Note, in the earlier examples we had used  fmt.Println()  On line 7, 11   15, we print out the data type, to check the data type we use a special character \"%T\", which acts as a placeholder and represent the data \"Type\", it is followed by the variable name.  fmt.Printf( The type of variable  num  is: %T.\\n , num)\nfmt.Printf( The type of variable  decimal  is: %T.\\n , decimal)\nfmt.Printf( The type of variable  name  is : %T.\\n , name)  If you don't understand the print statements, no worries, we will be having a dedicated section on formatting output, for now type everything as in the code above and make sure it runs.", 
            "title": "Code Review"
        }, 
        {
            "location": "/basic/shorthand-declaration/#github", 
            "text": "Just in case you have some errors with your code, you can check out the code at github repo  Github Repo", 
            "title": "Github"
        }, 
        {
            "location": "/basic/shorthand-declaration/#golang-playground", 
            "text": "You can also run the code at playground  Golang Playground", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/shorthand-declaration/#next", 
            "text": "In the next chapter we will see about   if/else  condition, don't worry if its becoming too geeky, keep up with the code and in no time you will get the hang of it.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/if-else/", 
            "text": "Conditions \n if/else\n.\n\n\n\n\n\nObjective\n\n\nTo understand if/else conditions. \n\n\nIf/else conditions are of very fundamental importance to programming and are present in all the programming languages.\n\n\nThe intent of condition is very simple\n\n\nif condition {\n    do something\n} else {\n    do another thing\n}\n\n\n\n\n\nStructure\n\n\nNavigate to our code folder\n\n\ncode/basic/\n\n\n\n\n\nFor our program create a new folder '07_if_else'\n\n\ncode/basic/07_if_else\n\n\n\n\n\nAnd lets create a file 'if_else.go' in it, finally the structure would look like this:\n\n\ncode/basic/07_if_else/if_else.go\n\n\n\n\n\nCode\n\n\nThe code will be divided into two parts\n\n\n1.)\n\n\nif/else condition\n1\n \npackage\n \nmain\n\n\n2\n \n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \nfunc\n \nmain\n()\n \n{\n\n\n6\n \nd\n \n:=\n \nDog\n\n\n7\n \nc\n \n:=\n \nCat\n\n\n8\n\n\n9\n \n// checking the value of variables\n\n\n10\n \nif\n \nd\n \n==\n \nDog\n \n{\n\n\n11\n  \nfmt\n.\nPrintln\n(\nWoff\n)\n\n\n12\n \n}\n \nelse\n \n{\n\n\n13\n  \nfmt\n.\nPrintln\n(\nI don\nt know which animal!\n)\n\n\n14\n \n}\n\n\n15\n\n\n\n\nReview\n\n\non line 10 we check if the value of the variable \"d\" is equal to \"Dog\"\n\n\nif d == \nDog\n\n\n\n\n\n\nIf the condition is true then we print out \"Woff\" \n\n\nfmt.Println(\nWoff\n)\n\n\n\n\n\nIf the condition is false, we print \"I don't know which animal\"\n\n\nfmt.Println(\nI don\nt know which animal!\n)\n\n\n\n\n\n2.) If/else statements can also be chained if you have multiple conditions\n\n\nif/else condition\n16\n \n// You can also chain if / else conditions\n\n\n17\n \nif\n \nc\n \n==\n \nmonkey\n \n{\n\n\n18\n  \nfmt\n.\nPrintln\n(\nI am a monkey.\n)\n\n\n19\n \n}\n \nelse\n \nif\n \nc\n \n==\n \nDog\n \n{\n\n\n20\n  \nfmt\n.\nPrintln\n(\nI am a dog.\n)\n\n\n21\n \n}\n \nelse\n \nif\n \nc\n \n==\n \nCat\n \n{\n\n\n22\n  \nfmt\n.\nPrintln\n(\nMeoww\n)\n\n\n23\n \n}\n\n\n24\n \n}\n\n\n\n\nReview\n\n\nOn line 17 we check if value of the variable \"c\" is \"monkey\", if the conditions evaluates to true then we print \"I am a monkey\"\n\n\nif c == \nmonkey\n\n\n\n\n\n\nIf it evaluates to false then we check it once again if it contains the value of \"Dog\"\n\n\nif c == \nDog\n\n\n\n\n\n\nSince, this also evaluates to false, we check for the next condition\n\n\nif c == \nCat\n\n\n\n\n\n\nAs it evaluates to true, we print out \"Meoww\" on the screen\n\n\nfmt.Println(\nMeoww\n)\n\n\n\n\n\nIn case if \"c\" does not evaluate to true in any of the case, \n nothing\n will be printed.\n\n\nOutput\n\n\nWoff\nMeoww\n\n\n\n\n\nNote\n\n\nStrings in Go are case sensitive, \"monkey\" and \"Monkey\" are evaluated differently, so be sure of using the right case when checking for evaluation.\n\n\nGithub\n\n\nJust in case you have some errors with your code, you can check out the code at github repo\n\n\nGithub Repo\n\n\nGolang Playground\n\n\nYou can also run the code at playground\n\n\nGolang Playground\n\n\nNext\n\n\nWe will see \n for\n loops.", 
            "title": "07 Condition - if/else"
        }, 
        {
            "location": "/basic/if-else/#conditions-czjqqkd0-ifelseczjqqkd1", 
            "text": "", 
            "title": "Conditions  if/else."
        }, 
        {
            "location": "/basic/if-else/#objective", 
            "text": "To understand if/else conditions.   If/else conditions are of very fundamental importance to programming and are present in all the programming languages.  The intent of condition is very simple  if condition {\n    do something\n} else {\n    do another thing\n}", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/if-else/#structure", 
            "text": "Navigate to our code folder  code/basic/  For our program create a new folder '07_if_else'  code/basic/07_if_else  And lets create a file 'if_else.go' in it, finally the structure would look like this:  code/basic/07_if_else/if_else.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/if-else/#code", 
            "text": "The code will be divided into two parts  1.)  if/else condition 1   package   main  2   3   import   fmt  4  5   func   main ()   {  6   d   :=   Dog  7   c   :=   Cat  8  9   // checking the value of variables  10   if   d   ==   Dog   {  11    fmt . Println ( Woff )  12   }   else   {  13    fmt . Println ( I don t know which animal! )  14   }  15   Review  on line 10 we check if the value of the variable \"d\" is equal to \"Dog\"  if d ==  Dog   If the condition is true then we print out \"Woff\"   fmt.Println( Woff )  If the condition is false, we print \"I don't know which animal\"  fmt.Println( I don t know which animal! )  2.) If/else statements can also be chained if you have multiple conditions  if/else condition 16   // You can also chain if / else conditions  17   if   c   ==   monkey   {  18    fmt . Println ( I am a monkey. )  19   }   else   if   c   ==   Dog   {  20    fmt . Println ( I am a dog. )  21   }   else   if   c   ==   Cat   {  22    fmt . Println ( Meoww )  23   }  24   }   Review  On line 17 we check if value of the variable \"c\" is \"monkey\", if the conditions evaluates to true then we print \"I am a monkey\"  if c ==  monkey   If it evaluates to false then we check it once again if it contains the value of \"Dog\"  if c ==  Dog   Since, this also evaluates to false, we check for the next condition  if c ==  Cat   As it evaluates to true, we print out \"Meoww\" on the screen  fmt.Println( Meoww )  In case if \"c\" does not evaluate to true in any of the case,   nothing  will be printed.", 
            "title": "Code"
        }, 
        {
            "location": "/basic/if-else/#output", 
            "text": "Woff\nMeoww", 
            "title": "Output"
        }, 
        {
            "location": "/basic/if-else/#note", 
            "text": "Strings in Go are case sensitive, \"monkey\" and \"Monkey\" are evaluated differently, so be sure of using the right case when checking for evaluation.", 
            "title": "Note"
        }, 
        {
            "location": "/basic/if-else/#github", 
            "text": "Just in case you have some errors with your code, you can check out the code at github repo  Github Repo", 
            "title": "Github"
        }, 
        {
            "location": "/basic/if-else/#golang-playground", 
            "text": "You can also run the code at playground  Golang Playground", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/if-else/#next", 
            "text": "We will see   for  loops.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/for_loops/", 
            "text": "Understanding \n For Loops\n.\n\n\n\n\n\nObjective\n\n\nTo understand \n for\n loops.\n\n\nGo offers only \"for\" loops for doing repetitive tasks, if you come from some other languages there are no \"while\" or \"do-while\" loops in Go, instead \"for\" loops have a flexible syntax and offers all the looping functions.\n\n\nGeneral syntax is:\n\n\nfor condition {\n    do something\n}\n\n\n\n\n\nStructure\n\n\nNavigate to our code folder\n\n\ncode/basic/\n\n\n\n\n\nFor our program create a new folder '08_for_loops'\n\n\ncode/basic/08_for_loops\n\n\n\n\n\nAnd lets create a file 'for_loops.go' in it, finally the structure would look like this:\n\n\ncode/basic/08_for_loops/for_loops.go\n\n\n\n\n\nCode\n\n\nThe code will be divided into four parts:\n\n\n1.)\n\n\nfor loops\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \nfunc\n \nmain\n()\n \n{\n\n\n6\n \n// Variation 1 - conditional loop\n\n\n7\n \nnum1\n \n:=\n \n0\n\n\n8\n \nfmt\n.\nPrintln\n(\nStarting for loop...\n)\n\n\n9\n \nfor\n \ni\n \n:=\n \n0\n;\n \ni\n \n \n11\n;\n \ni\n++\n \n{\n\n\n10\n  \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum1\n)\n\n\n11\n  \nnum1\n++\n\n\n12\n \n}\n\n\n13\n \nfmt\n.\nPrintln\n()\n\n\n\n\nReview\n\n\nLine 9 declared a for loop along with condition\n\n\nfor i := 0; i \n 11; i++ {\n\n\n\n\n\nWe initial the variable \"i\" and set it to \"0\", then we say loop till \"i is less than 11\" and after each pass do \"i++\", i.e increment the value of \"i\" by 1.\n\n\nLine 10 prints the value after each pass and on line 11 we increment the value of num\n\n\nfmt.Println(\nNum =\n, num1)\nnum1++\n\n\n\n\n\n2.)\n\n\nfor loops\n14\n \n// Variation 2 - Infinite loop\n\n\n15\n \nnum2\n \n:=\n \n20\n\n\n16\n \nfmt\n.\nPrintln\n(\nEntering infinite loop...\n)\n\n\n17\n \nfor\n \n{\n\n\n18\n  \n// break condition\n\n\n19\n  \nif\n \nnum2\n \n \n10\n \n{\n\n\n20\n      \nbreak\n\n\n21\n  \n}\n\n\n22\n  \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum2\n)\n\n\n23\n  \nnum2\n--\n\n\n24\n \n}\n\n\n25\n \nfmt\n.\nPrintln\n()\n\n\n\n\nReview\n\n\nOn line 17 we start a infinite loop, the for loop will keep on executing till it encounters a break condition or runs out of memory\n\n\nfor {\n\n\n\n\n\nOn line 19 we check for a break condition\n\n\nif num2 \n 10\n\n\n\n\n\n3.)\n\n\nfor loops\n26\n  \n// Variation 3 - Optional statements\n\n\n27\n \nnum3\n \n:=\n \n20\n\n\n28\n \nfmt\n.\nPrintln\n(\nLoop with optional statements...\n)\n\n\n29\n \nfor\n \nnum3\n \n=\n \n30\n \n{\n\n\n30\n  \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum3\n)\n\n\n31\n  \nnum3\n++\n\n\n32\n \n}\n\n\n33\n \nfmt\n.\nPrintln\n()\n\n\n\n\nReview\n\n\nOn line 29 we start a loop with operational statements, the loop will break when it fulfills the condition.\n\n\nfor num3 \n= 30\n\n\n\n\n\nNote we have declared and initialized \"num3\" on line 27\n\n\nnum3 := 20\n\n\n\n\n\n4.)\n\n\nfor loops\n34\n  \n// Variation 4 - Boolean operators\n\n\n35\n \ncond\n \n:=\n \ntrue\n\n\n36\n \nnum4\n \n:=\n \n30\n\n\n37\n \nfmt\n.\nPrintln\n(\nLoops with boolean operator...\n)\n\n\n38\n \nfor\n \ncond\n \n{\n\n\n39\n  \nif\n \nnum4\n \n=\n \n40\n \n{\n\n\n40\n      \ncond\n \n=\n \nfalse\n\n\n41\n  \n}\n\n\n42\n  \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum4\n)\n\n\n43\n  \nnum4\n++\n\n\n44\n \n}\n\n\n45\n \n}\n\n\n\n\nReview\n\n\nWe declare a boolean condition on line 35, and start the loop on line 38\n\n\nfor cond\n\n\n\n\n\nIn order to break the loop we set the condition on line 39\n\n\nif num4 \n= 40 {\n    cond = false\n}\n\n\n\n\n\nFull Code\n\n\nComplete For-Loop Code\npackage\n \nmain\n\n\n\nimport\n \nfmt\n\n\n\nfunc\n \nmain\n()\n \n{\n\n    \n// Variation 1 - conditional loop\n\n    \nnum1\n \n:=\n \n0\n\n    \nfmt\n.\nPrintln\n(\nStarting for loop...\n)\n\n    \nfor\n \ni\n \n:=\n \n0\n;\n \ni\n \n \n11\n;\n \ni\n++\n \n{\n\n        \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum1\n)\n\n        \nnum1\n++\n\n    \n}\n\n    \nfmt\n.\nPrintln\n()\n\n    \n// Variation 2 - Infinite loop\n\n    \nnum2\n \n:=\n \n20\n\n    \nfmt\n.\nPrintln\n(\nEntering infinite loop...\n)\n\n    \nfor\n \n{\n\n        \n// break condition\n\n        \nif\n \nnum2\n \n \n10\n \n{\n\n            \nbreak\n\n        \n}\n\n        \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum2\n)\n\n        \nnum2\n--\n\n    \n}\n\n    \nfmt\n.\nPrintln\n()\n\n    \n// Variation 3 - Optional statements\n\n    \nnum3\n \n:=\n \n20\n\n    \nfmt\n.\nPrintln\n(\nLoop with optional statements...\n)\n\n    \nfor\n \nnum3\n \n=\n \n30\n \n{\n\n        \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum3\n)\n\n        \nnum3\n++\n\n    \n}\n\n    \nfmt\n.\nPrintln\n()\n\n    \n// Variation 4 - Boolean operators\n\n    \ncond\n \n:=\n \ntrue\n\n    \nnum4\n \n:=\n \n30\n\n    \nfmt\n.\nPrintln\n(\nLoops with boolean operator...\n)\n\n    \nfor\n \ncond\n \n{\n\n        \nif\n \nnum4\n \n=\n \n40\n \n{\n\n            \ncond\n \n=\n \nfalse\n\n        \n}\n\n        \nfmt\n.\nPrintln\n(\nNum =\n,\n \nnum4\n)\n\n        \nnum4\n++\n\n    \n}\n\n\n}\n\n\n\n\nNote\n\n\nGo ships with one more variant know as \"for - range\", we will study it in the coming chapters.\n\n\nGithub\n\n\nJust in case you have some errors with your code, you can check out the code at github repo\n\n\nGithub Repo\n\n\nGolang Playground\n\n\nYou can also run the code at playground\n\n\nGolang Playground\n\n\nNext\n\n\nIn the next chapter we will learn about \n function\n declaration.", 
            "title": "08 For Loops"
        }, 
        {
            "location": "/basic/for_loops/#understanding-czjqqkd0-for-loopsczjqqkd1", 
            "text": "", 
            "title": "Understanding  For Loops."
        }, 
        {
            "location": "/basic/for_loops/#objective", 
            "text": "To understand   for  loops.  Go offers only \"for\" loops for doing repetitive tasks, if you come from some other languages there are no \"while\" or \"do-while\" loops in Go, instead \"for\" loops have a flexible syntax and offers all the looping functions.  General syntax is:  for condition {\n    do something\n}", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/for_loops/#structure", 
            "text": "Navigate to our code folder  code/basic/  For our program create a new folder '08_for_loops'  code/basic/08_for_loops  And lets create a file 'for_loops.go' in it, finally the structure would look like this:  code/basic/08_for_loops/for_loops.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/for_loops/#code", 
            "text": "The code will be divided into four parts:  1.)  for loops 1   package   main  2  3   import   fmt  4  5   func   main ()   {  6   // Variation 1 - conditional loop  7   num1   :=   0  8   fmt . Println ( Starting for loop... )  9   for   i   :=   0 ;   i     11 ;   i ++   {  10    fmt . Println ( Num = ,   num1 )  11    num1 ++  12   }  13   fmt . Println ()   Review  Line 9 declared a for loop along with condition  for i := 0; i   11; i++ {  We initial the variable \"i\" and set it to \"0\", then we say loop till \"i is less than 11\" and after each pass do \"i++\", i.e increment the value of \"i\" by 1.  Line 10 prints the value after each pass and on line 11 we increment the value of num  fmt.Println( Num = , num1)\nnum1++  2.)  for loops 14   // Variation 2 - Infinite loop  15   num2   :=   20  16   fmt . Println ( Entering infinite loop... )  17   for   {  18    // break condition  19    if   num2     10   {  20        break  21    }  22    fmt . Println ( Num = ,   num2 )  23    num2 --  24   }  25   fmt . Println ()   Review  On line 17 we start a infinite loop, the for loop will keep on executing till it encounters a break condition or runs out of memory  for {  On line 19 we check for a break condition  if num2   10  3.)  for loops 26    // Variation 3 - Optional statements  27   num3   :=   20  28   fmt . Println ( Loop with optional statements... )  29   for   num3   =   30   {  30    fmt . Println ( Num = ,   num3 )  31    num3 ++  32   }  33   fmt . Println ()   Review  On line 29 we start a loop with operational statements, the loop will break when it fulfills the condition.  for num3  = 30  Note we have declared and initialized \"num3\" on line 27  num3 := 20  4.)  for loops 34    // Variation 4 - Boolean operators  35   cond   :=   true  36   num4   :=   30  37   fmt . Println ( Loops with boolean operator... )  38   for   cond   {  39    if   num4   =   40   {  40        cond   =   false  41    }  42    fmt . Println ( Num = ,   num4 )  43    num4 ++  44   }  45   }   Review  We declare a boolean condition on line 35, and start the loop on line 38  for cond  In order to break the loop we set the condition on line 39  if num4  = 40 {\n    cond = false\n}", 
            "title": "Code"
        }, 
        {
            "location": "/basic/for_loops/#full-code", 
            "text": "Complete For-Loop Code package   main  import   fmt  func   main ()   { \n     // Variation 1 - conditional loop \n     num1   :=   0 \n     fmt . Println ( Starting for loop... ) \n     for   i   :=   0 ;   i     11 ;   i ++   { \n         fmt . Println ( Num = ,   num1 ) \n         num1 ++ \n     } \n     fmt . Println () \n     // Variation 2 - Infinite loop \n     num2   :=   20 \n     fmt . Println ( Entering infinite loop... ) \n     for   { \n         // break condition \n         if   num2     10   { \n             break \n         } \n         fmt . Println ( Num = ,   num2 ) \n         num2 -- \n     } \n     fmt . Println () \n     // Variation 3 - Optional statements \n     num3   :=   20 \n     fmt . Println ( Loop with optional statements... ) \n     for   num3   =   30   { \n         fmt . Println ( Num = ,   num3 ) \n         num3 ++ \n     } \n     fmt . Println () \n     // Variation 4 - Boolean operators \n     cond   :=   true \n     num4   :=   30 \n     fmt . Println ( Loops with boolean operator... ) \n     for   cond   { \n         if   num4   =   40   { \n             cond   =   false \n         } \n         fmt . Println ( Num = ,   num4 ) \n         num4 ++ \n     }  }", 
            "title": "Full Code"
        }, 
        {
            "location": "/basic/for_loops/#note", 
            "text": "Go ships with one more variant know as \"for - range\", we will study it in the coming chapters.", 
            "title": "Note"
        }, 
        {
            "location": "/basic/for_loops/#github", 
            "text": "Just in case you have some errors with your code, you can check out the code at github repo  Github Repo", 
            "title": "Github"
        }, 
        {
            "location": "/basic/for_loops/#golang-playground", 
            "text": "You can also run the code at playground  Golang Playground", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/for_loops/#next", 
            "text": "In the next chapter we will learn about   function  declaration.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/functions/", 
            "text": "Understanding \n Functions\n.\n\n\n\n\n\nObjective\n\n\nTo understand \n functions\n in Go.\n\n\nFunctions are first class citizens in Go, in fact you have already been using functions, we have been declaring \"main\" function and using it from our first program.\n\n\nGeneral syntax is:\n\n\nfunc funcName(optional parameters) return parameters {\n    do something\n}\n\n\n\n\n\nStructure\n\n\nNavigate to our code folder\n\n\ncode/basic/\n\n\n\n\n\nFor our program create a new folder '09_functions'\n\n\ncode/basic/09_functions/\n\n\n\n\n\nAnd lets create a file 'functions.go' in it, finally the structure would look like this:\n\n\ncode/basic/09_functions/functions.go\n\n\n\n\n\nCode\n\n\nThe code will be divided into four parts:\n\n\n1.)\n\n\nFunctions\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \nimport\n \nfmt\n\n\n4\n\n\n5\n \n// sayHello prints \nHello, Octy!\n\n\n6\n \nfunc\n \nsayHello\n()\n \n{\n\n\n7\n \nfmt\n.\nPrintln\n(\nIn func sayHello()...\n)\n\n\n8\n \nfmt\n.\nPrintln\n(\nHello, Octy!\n)\n\n\n9\n \nfmt\n.\nPrintln\n()\n\n\n10\n \n}\n\n\n11\n\n\n\n\nReview\n\n\nLine 6 defines a function \"sayHello\" which prints \"Hello, Octy!\" on screen\n\n\nfunc sayHello()\n\n\n\n\n\n2.)\n\n\nFunctions\n12\n \n// function with passing values\n\n\n13\n \nfunc\n \nsayHelloTo\n(\nname\n \nstring\n)\n \n{\n\n\n14\n \nfmt\n.\nPrintln\n(\nIn func sayHelloTo()...\n)\n\n\n15\n \nfmt\n.\nPrintln\n(\nHello,\n,\n \nname\n)\n\n\n16\n \nfmt\n.\nPrintln\n()\n\n\n17\n \n}\n\n\n18\n\n\n\n\nReview\n\n\nOn line 13 we declare a function \"sayHelloTo\" with accepts a parameter.\n\n\nfunc sayHelloTo(name string)\n\n\n\n\n\nsayHelloTo accepts a string \"name\" as a parameter and then print it on line 15.\n\n\n3.)\n\n\nFunctions\n19\n \n// function with return values\n\n\n20\n \nfunc\n \nprintNums\n(\nn\n \nint\n)\n \nerror\n \n{\n\n\n21\n \nfmt\n.\nPrintln\n(\nIn func printNums()...\n)\n\n\n22\n \nvar\n \nerr\n \nerror\n\n\n23\n \nfor\n \ni\n \n:=\n \n0\n;\n \ni\n \n=\n \nn\n;\n \ni\n++\n \n{\n\n\n24\n  \n_\n,\n \nerr\n \n=\n \nfmt\n.\nPrintln\n(\ni\n)\n\n\n25\n \n}\n\n\n26\n \nreturn\n \nerr\n\n\n27\n \n}\n\n\n28\n\n\n\n\nReview\n\n\nLine 20 we define a function \"printNums\" with accepts a parameter and returns a parameter of type \"error\".\n\n\nfunc printNums(n int) error\n\n\n\n\n\nOn line 22 we define a variable \"err\" of type \"error\", till now we have seen data types of integer, float, boolean, string, similarly Go offers a custom type \"error\".\n\n\nvar err error\n\n\n\n\n\nLine 24 is a little special, Println() returns two values, \"number of bytes written\" and an \"error\", as we don't want number of bytes written we use a underscore \"_\", Go compiler ignores underscore and throws away its value.\n\n\n_, err = fmt.Println(i)\n\n\n\n\n\nWe catch the error value in the variable \"err\" and return it on line 26.\n\n\nreturn err\n\n\n\n\n\n4.)\n\n\nFunctions\n29\n \n// main function\n\n\n30\n \nfunc\n \nmain\n()\n \n{\n\n\n31\n \nfmt\n.\nPrintln\n(\nIn func main()\n)\n\n\n32\n \nfmt\n.\nPrintln\n(\nNow calling func sayHello()...\n)\n\n\n33\n \nfmt\n.\nPrintln\n()\n\n\n34\n \n// calling function sayHello()\n\n\n35\n \nsayHello\n()\n\n\n36\n \n// calling a function with passing values\n\n\n37\n \nname\n \n:=\n \nGopher\n\n\n38\n \nsayHelloTo\n(\nname\n)\n\n\n39\n \n// calling a function with return parameters\n\n\n40\n \nerr\n \n:=\n \nprintNums\n(\n10\n)\n\n\n41\n \nif\n \nerr\n \n==\n \nnil\n \n{\n\n\n42\n  \nfmt\n.\nPrintln\n(\nThere are no errors!\n)\n\n\n43\n \n}\n \nelse\n \n{\n\n\n44\n  \nfmt\n.\nPrintln\n(\nError with printing:\n,\n \nerr\n)\n\n\n45\n \n}\n\n\n46\n \n}\n\n\n\n\nReview\n\n\nWe call individual functions on lines 35, 38 \n 40.\n\n\nsayHello()\n\nsayHelloTo(name)\n\n\n\n\n\nWe pass a value \"name\" along with the function.\n\n\nerr := printNums(10)\n\n\n\n\n\nWe call printNums along with a value \"10\" and assign it to the variable \"err\", the return error gets stored in the variable \"err\"\n\n\nFull Code\n\n\nFull Code\n\n\nComplete Functions Code\npackage\n \nmain\n\n\n\nimport\n \nfmt\n\n\n\n// sayHello prints \nHello, Octy!\n\n\nfunc\n \nsayHello\n()\n \n{\n\n    \nfmt\n.\nPrintln\n(\nIn func sayHello()...\n)\n\n    \nfmt\n.\nPrintln\n(\nHello, Octy!\n)\n\n    \nfmt\n.\nPrintln\n()\n\n\n}\n\n\n\n// function with passing values\n\n\nfunc\n \nsayHelloTo\n(\nname\n \nstring\n)\n \n{\n\n    \nfmt\n.\nPrintln\n(\nIn func sayHelloTo()...\n)\n\n    \nfmt\n.\nPrintln\n(\nHello,\n,\n \nname\n)\n\n    \nfmt\n.\nPrintln\n()\n\n\n}\n\n\n\n// function with return values\n\n\nfunc\n \nprintNums\n(\nn\n \nint\n)\n \nerror\n \n{\n\n    \nfmt\n.\nPrintln\n(\nIn func printNums()...\n)\n\n    \nvar\n \nerr\n \nerror\n\n    \nfor\n \ni\n \n:=\n \n0\n;\n \ni\n \n=\n \nn\n;\n \ni\n++\n \n{\n\n        \n_\n,\n \nerr\n \n=\n \nfmt\n.\nPrintln\n(\ni\n)\n\n    \n}\n\n    \nreturn\n \nerr\n\n\n}\n\n\n\n// main function\n\n\nfunc\n \nmain\n()\n \n{\n\n    \nfmt\n.\nPrintln\n(\nIn func main()\n)\n\n    \nfmt\n.\nPrintln\n(\nNow calling func sayHello()...\n)\n\n    \nfmt\n.\nPrintln\n()\n\n    \n// calling function sayHello()\n\n    \nsayHello\n()\n\n    \n// calling a function with passing values\n\n    \nname\n \n:=\n \nGopher\n\n    \nsayHelloTo\n(\nname\n)\n\n    \n// calling a function with return parameters\n\n    \nerr\n \n:=\n \nprintNums\n(\n10\n)\n\n    \nif\n \nerr\n \n==\n \nnil\n \n{\n\n        \nfmt\n.\nPrintln\n(\nThere are no errors!\n)\n\n    \n}\n \nelse\n \n{\n\n        \nfmt\n.\nPrintln\n(\nError with printing:\n,\n \nerr\n)\n\n    \n}\n\n\n}\n\n\n\n\nGithub\n\n\nJust in case you have some errors with your code, you can check out the code at github repo\n\n\nGithub Repo\n\n\nGolang Playground\n\n\nYou can also run the code at playground\n\n\nGolang Playground\n\n\nNext\n\n\nIn the next chapter we will learn about \n packages\n in Go.", 
            "title": "09 Function"
        }, 
        {
            "location": "/basic/functions/#understanding-czjqqkd0-functionsczjqqkd1", 
            "text": "", 
            "title": "Understanding  Functions."
        }, 
        {
            "location": "/basic/functions/#objective", 
            "text": "To understand   functions  in Go.  Functions are first class citizens in Go, in fact you have already been using functions, we have been declaring \"main\" function and using it from our first program.  General syntax is:  func funcName(optional parameters) return parameters {\n    do something\n}", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/functions/#structure", 
            "text": "Navigate to our code folder  code/basic/  For our program create a new folder '09_functions'  code/basic/09_functions/  And lets create a file 'functions.go' in it, finally the structure would look like this:  code/basic/09_functions/functions.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/functions/#code", 
            "text": "The code will be divided into four parts:  1.)  Functions 1   package   main  2  3   import   fmt  4  5   // sayHello prints  Hello, Octy!  6   func   sayHello ()   {  7   fmt . Println ( In func sayHello()... )  8   fmt . Println ( Hello, Octy! )  9   fmt . Println ()  10   }  11   Review  Line 6 defines a function \"sayHello\" which prints \"Hello, Octy!\" on screen  func sayHello()  2.)  Functions 12   // function with passing values  13   func   sayHelloTo ( name   string )   {  14   fmt . Println ( In func sayHelloTo()... )  15   fmt . Println ( Hello, ,   name )  16   fmt . Println ()  17   }  18   Review  On line 13 we declare a function \"sayHelloTo\" with accepts a parameter.  func sayHelloTo(name string)  sayHelloTo accepts a string \"name\" as a parameter and then print it on line 15.  3.)  Functions 19   // function with return values  20   func   printNums ( n   int )   error   {  21   fmt . Println ( In func printNums()... )  22   var   err   error  23   for   i   :=   0 ;   i   =   n ;   i ++   {  24    _ ,   err   =   fmt . Println ( i )  25   }  26   return   err  27   }  28   Review  Line 20 we define a function \"printNums\" with accepts a parameter and returns a parameter of type \"error\".  func printNums(n int) error  On line 22 we define a variable \"err\" of type \"error\", till now we have seen data types of integer, float, boolean, string, similarly Go offers a custom type \"error\".  var err error  Line 24 is a little special, Println() returns two values, \"number of bytes written\" and an \"error\", as we don't want number of bytes written we use a underscore \"_\", Go compiler ignores underscore and throws away its value.  _, err = fmt.Println(i)  We catch the error value in the variable \"err\" and return it on line 26.  return err  4.)  Functions 29   // main function  30   func   main ()   {  31   fmt . Println ( In func main() )  32   fmt . Println ( Now calling func sayHello()... )  33   fmt . Println ()  34   // calling function sayHello()  35   sayHello ()  36   // calling a function with passing values  37   name   :=   Gopher  38   sayHelloTo ( name )  39   // calling a function with return parameters  40   err   :=   printNums ( 10 )  41   if   err   ==   nil   {  42    fmt . Println ( There are no errors! )  43   }   else   {  44    fmt . Println ( Error with printing: ,   err )  45   }  46   }   Review  We call individual functions on lines 35, 38   40.  sayHello()\n\nsayHelloTo(name)  We pass a value \"name\" along with the function.  err := printNums(10)  We call printNums along with a value \"10\" and assign it to the variable \"err\", the return error gets stored in the variable \"err\"", 
            "title": "Code"
        }, 
        {
            "location": "/basic/functions/#full-code", 
            "text": "", 
            "title": "Full Code"
        }, 
        {
            "location": "/basic/functions/#full-code_1", 
            "text": "Complete Functions Code package   main  import   fmt  // sayHello prints  Hello, Octy!  func   sayHello ()   { \n     fmt . Println ( In func sayHello()... ) \n     fmt . Println ( Hello, Octy! ) \n     fmt . Println ()  }  // function with passing values  func   sayHelloTo ( name   string )   { \n     fmt . Println ( In func sayHelloTo()... ) \n     fmt . Println ( Hello, ,   name ) \n     fmt . Println ()  }  // function with return values  func   printNums ( n   int )   error   { \n     fmt . Println ( In func printNums()... ) \n     var   err   error \n     for   i   :=   0 ;   i   =   n ;   i ++   { \n         _ ,   err   =   fmt . Println ( i ) \n     } \n     return   err  }  // main function  func   main ()   { \n     fmt . Println ( In func main() ) \n     fmt . Println ( Now calling func sayHello()... ) \n     fmt . Println () \n     // calling function sayHello() \n     sayHello () \n     // calling a function with passing values \n     name   :=   Gopher \n     sayHelloTo ( name ) \n     // calling a function with return parameters \n     err   :=   printNums ( 10 ) \n     if   err   ==   nil   { \n         fmt . Println ( There are no errors! ) \n     }   else   { \n         fmt . Println ( Error with printing: ,   err ) \n     }  }", 
            "title": "Full Code"
        }, 
        {
            "location": "/basic/functions/#github", 
            "text": "Just in case you have some errors with your code, you can check out the code at github repo  Github Repo", 
            "title": "Github"
        }, 
        {
            "location": "/basic/functions/#golang-playground", 
            "text": "You can also run the code at playground  Golang Playground", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/functions/#next", 
            "text": "In the next chapter we will learn about   packages  in Go.", 
            "title": "Next"
        }, 
        {
            "location": "/basic/packages/", 
            "text": "Understanding \n Packages\n.\n\n\n\n\n\nObjective\n\n\nTo understand \n packages\n in Go.\n\n\nYou have already used packages, remember we imported \"fmt\" package and used Println() function in it.\n\n\nPackages help us in organizing our code, we can group together related functions in a package. You can create multiple functions and files inside a package.\n\n\nNote, that there can be only one \n func main()\n throughout your project, as main() is the starting point in any standalone application.\n\n\nStructure\n\n\nNavigate to our code folder\n\n\ncode/basic/\n\n\n\n\n\nFor our program create a new folder '10_packages'\n\n\ncode/basic/10_packages/\n\n\n\n\n\nAnd lets create a file 'main.go' in it, finally the structure would look like this:\n\n\ncode/basic/10_packages/main.go\n\n\n\n\n\nDeclaring Packages\n\n\nWe will be creating a custom package called as \"greeting\" and have a couple of functions in it, but we first need to declare a package.\n\n\nNavigate to our directory\n\n\ncode/basic/10_packages/\n\n\n\n\n\nFor declaring a package create a folder named \"greeting\", now the structure would be\n\n\ncode/basic/10_packages/greeting\n\n\n\n\n\nInside the \"greeting\" folder create a file \"greet.go\", we will write our functions inside \"greet.go\" and call it from main() as required.\n\n\ncode/basic/10_packages/greeting/greet.go\n\n\n\n\n\nNow our structure would look like\n\n\n\n\nCode\n\n\nA) First let us write the code for our custom package \"greeting\"\n\n\nOpen \n greet.go\n from:\n\n\ncode/basic/10_packages/greeting/greet.go\n\n\n\n\n\nWe will write the code in 4 parts:\n\n\n1.)\n\n\nPart-1 greet.go\n1\n \npackage\n \ngreeting\n\n\n2\n \n\n3\n \n// The above statement declares that this file belong to\n\n\n4\n \n// the package \ngreeting\n\n\n5\n\n\n6\n \n// import other packages\n\n\n7\n \nimport\n \nfmt\n\n\n8\n\n\n9\n \n// GoodMorning - Note that the name of our function starts with a capital alphabet,\n\n\n10\n \n// capital alphabet denotes that the function is exported or visible outside\n\n\n11\n \n// the package.\n\n\n12\n \n// Now you can understand why Println() has a capital letter in the beginning !\n\n\n13\n \nfunc\n \nGoodMorning\n()\n \n{\n\n\n14\n \nfmt\n.\nPrintln\n(\nGood Morning, Octallium!\n)\n\n\n15\n \nfmt\n.\nPrintln\n()\n\n\n16\n \n}\n\n\n17\n\n\n\n\nReview\n\n\nOn line 1 we declare that this file belongs to the package \"greeting\", note that the package name and the parent directory name has to be the same.\n\n\npackage greeting\n\n\n\n\n\nOn line 13 we declare a function \"GoodMorning\" which prints out \"Good Morning, Octallium!\" on the screen\n\n\nfunc GoodMorning()\n\n\n\n\n\nNote that the first alphabet is capital, it symbolizes that the function is exported or visible to other packages, we will call it from our main().\n\n\n2.)\n\n\nPart-2 greet.go\n18\n \n// goodAfterNoon starts with a lowercase alphabet, means that this function is not\n\n\n19\n \n// exported, and can only be accessed within the package.\n\n\n20\n \n// Calling goodAfterNoon from another package will result in an error\n\n\n21\n \nfunc\n \ngoodAfterNoon\n()\n \n{\n\n\n22\n \nfmt\n.\nPrintln\n(\nGood Afternoon, Octallium!\n)\n\n\n23\n \nfmt\n.\nPrintln\n()\n\n\n24\n \n}\n\n\n25\n\n\n26\n \n// CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file,\n\n\n27\n \n// and hence it can call it.\n\n\n28\n \nfunc\n \nCallGoodAfterNoon\n()\n \n{\n\n\n29\n \ngoodAfterNoon\n()\n\n\n30\n \n}\n\n\n31\n\n\n\n\nReview\n\n\nOn line 21 we declare a function \"goodAfterNoon\", but since the first alphabet is lowercase, the function is not exported, i.e it is not visible from other packages and can be accessed only within the file.\n\n\nfunc goodAfterNoon()\n\n\n\n\n\nIn order to access it, on line 28 we create another function \"CallGoodAfterNoon\", it can access goodAfterNoon as it belongs to the same file and we can call goodAfterNoon() by calling CallGoodAfterNoon().\n\n\nfunc CallGoodAfterNoon()\n\n\n\n\n\n3.)\n\n\nPart-3 greet.go\n32\n \n// GoodNight accepts a string parameter and prints the result to the screen\n\n\n33\n \nfunc\n \nGoodNight\n(\nname\n \nstring\n)\n \n{\n\n\n34\n \nfmt\n.\nPrintln\n(\nGood Night, \n,\n \nname\n)\n\n\n35\n \nfmt\n.\nPrintln\n()\n\n\n36\n \n}\n\n\n37\n\n\n\n\nReview\n\n\nOn line 33 we declare a function \"GoodNight\" which accepts a string and prints out a message. Note that the function doesn't return anything.\n\n\nfunc GoodNight(name string)\n\n\n\n\n\n4.)\n\n\nPart-4 greet.go\n38\n \n// Factorial accepts an int parameter and also returns an int,\n\n\n39\n \n// it calculates the factorial of the input int and returns\n\n\n40\n \n// the factorial.\n\n\n41\n \n// At this point ignore how the function works, just concentrate\n\n\n42\n \n// on the declaration and syntax.\n\n\n43\n \nfunc\n \nFactorial\n(\nn\n \nint\n)\n \nint\n \n{\n\n\n44\n \nif\n \nn\n \n==\n \n0\n \n{\n\n\n45\n  \nreturn\n \n1\n\n\n46\n \n}\n\n\n47\n \nreturn\n \nn\n \n*\n \nFactorial\n(\nn\n-\n1\n)\n\n\n48\n \n}\n\n\n\n\nReview\n\n\nOn line 43 we declare a function \"Factorial\" which accepts an int and also returns an int.\n\n\nfunc Factorial(n int) int\n\n\n\n\n\nAt this point don't think how the function is working, let's concentrate on the declaration and syntax.\n\n\nComplete greet.go\npackage\n \ngreeting\n\n\n\n// The above statement declares that this file belong to\n\n\n// the package \ngreeting\n\n\n\n// import other packages\n\n\nimport\n \nfmt\n\n\n\n// GoodMorning - Note that the name of our function starts with a capital alphabet,\n\n\n// capital alphabet denotes that the function is exported or visible outside\n\n\n// the package.\n\n\n// Now you can understand why Println() has a capital letter in the beginning !\n\n\nfunc\n \nGoodMorning\n()\n \n{\n\n    \nfmt\n.\nPrintln\n(\nGood Morning, Octallium!\n)\n\n    \nfmt\n.\nPrintln\n()\n\n\n}\n\n\n\n// goodAfterNoon starts with a lowercase alphabet, means that this function is not\n\n\n// exported, and can only be accessed within the package.\n\n\n// Calling goodAfterNoon from another package will result in an error\n\n\nfunc\n \ngoodAfterNoon\n()\n \n{\n\n    \nfmt\n.\nPrintln\n(\nGood Afternoon, Octallium!\n)\n\n    \nfmt\n.\nPrintln\n()\n\n\n}\n\n\n\n// CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file,\n\n\n// and hence it can call it.\n\n\nfunc\n \nCallGoodAfterNoon\n()\n \n{\n\n    \ngoodAfterNoon\n()\n\n\n}\n\n\n\n// GoodNight accepts a string parameter and prints the result to the screen\n\n\nfunc\n \nGoodNight\n(\nname\n \nstring\n)\n \n{\n\n    \nfmt\n.\nPrintln\n(\nGood Night, \n,\n \nname\n)\n\n    \nfmt\n.\nPrintln\n()\n\n\n}\n\n\n\n// Factorial accepts an int parameter and also returns an int,\n\n\n// it calculates the factorial of the input int and returns\n\n\n// the factorial.\n\n\n// At this point ignore how the function works, just concentrate\n\n\n// on the declaration and syntax.\n\n\nfunc\n \nFactorial\n(\nn\n \nint\n)\n \nint\n \n{\n\n    \nif\n \nn\n \n==\n \n0\n \n{\n\n        \nreturn\n \n1\n\n    \n}\n\n    \nreturn\n \nn\n \n*\n \nFactorial\n(\nn\n-\n1\n)\n\n\n}\n\n\n\n\nB) Let's write the main.go\n\n\nNavigate and open main.go from:\n\n\ncode/basic/10_packages/main.go\n\n\n\n\n\nmain.go\n1\n \npackage\n \nmain\n\n\n2\n\n\n3\n \n// The above declaration says that this file belongs to the \nmain\n package\n\n\n4\n\n\n5\n \n// importing our packages\n\n\n6\n \nimport\n \n(\n\n\n7\n    \n// package \nfmt\n comes in-built as a part of Go standard library\n\n\n8\n    \nfmt\n\n\n9\n    \n// importing our custom package\n\n\n10\n    \n./greeting\n\n\n11\n    \n// the \n./\n denotes that from the current directory go to the \ngreeting\n directory\n\n\n12\n  \n)\n\n\n13\n\n\n14\n \nfunc\n \nmain\n()\n \n{\n\n\n15\n    \n// Calling the GoodMorning() from greeting package\n\n\n16\n    \nfmt\n.\nPrintln\n(\nCalling function GoodMorning() from package \ngreeting\n...\n)\n\n\n17\n    \ngreeting\n.\nGoodMorning\n()\n\n\n18\n    \n// Calling the goodAfterNoon() from greeting package\n\n\n19\n    \nfmt\n.\nPrintln\n(\nCalling function goodAfterNoon() from package \ngreeting\n...\n)\n\n\n20\n    \n// as goodAfterNoon is not directly accessible, we call CallGoodAfterNoon()\n\n\n21\n    \n// which in turn calls goodAfterNoon()\n\n\n22\n    \ngreeting\n.\nCallGoodAfterNoon\n()\n\n\n23\n    \n// Calling the GoodNight() from greeting package\n\n\n24\n    \nfmt\n.\nPrintln\n(\nCalling function GoodNight() from package \ngreeting\n...\n)\n\n\n25\n    \ngreeting\n.\nGoodNight\n(\nGopher!\n)\n\n\n26\n    \n// Calling the Factorial function with passing an int\n\n\n27\n    \nnum\n \n:=\n \n10\n\n\n28\n    \n// As Factorial() returns an int, we save it in a new variable \nresult\n\n\n29\n    \nresult\n \n:=\n \ngreeting\n.\nFactorial\n(\nnum\n)\n\n\n30\n    \n// Printing the result on screen, note we are using Printf()\n\n\n31\n    \nfmt\n.\nPrintf\n(\nFactorial of %d is: %d.\\n\n,\n \nnum\n,\n \nresult\n)\n\n\n32\n \n}\n\n\n\n\nOn line 1 we declare that the file belongs to the package \"main\" \n\n\npackage main\n\n\n\n\n\nOn line 10 we import our custom package \"greeting\"\n\n\n./greeting\n\n\n\n\n\n\nThe \"./\" denotes that from the current directory go to the \"greeting\" directory. On line 17 we call the GoodMorning function\n\n\ngreeting.GoodMorning()\n\n\n\n\n\nNote the syntax\n\n\npackageName.funcName\n\n\n\n\n\nIf we try to directly call goodAfterNoon() we will get an error\n\n\nError\n:\n \ngreeting\n.\ngoodAfterNoon\n()\n\n\n\n\n\n\nSo, we call it by calling the CallGoodAfterNoon() function on line 22.\n\n\ngreeting.CallGoodAfterNoon()\n\n\n\n\n\nOn line 25 we call the GoodNight() function and pass a string \"Gopher\" along with it.\n\n\ngreeting.GoodNight(\nGopher!\n)\n\n\n\n\n\nOn line 29 we call the Factorial() function and pass an int, since it also returns an int, we save it in a variable \"result\" and print the output on line 31\n\n\nresult := greeting.Factorial(num)\n\n\n\n\n\nRunning your code\n\n\nOpen your terminal and navigate to our folder\n\n\ncode/basic/10_packages/\n\n\n\n\n\nOnce in the folder type the following command\n\n\ngo run main.go\n\n\n\n\n\nBuild\n\n\nTill, now we have been running our code, let's try to build our code by compiling it to binary.\n\n\nInstead of \"go run\" type the following command\n\n\ngo build main.go\n\n\n\n\n\nIf you are running on a unix based system including mac OSx, you can run the binary by typing\n\n\n./main\n\n\n\n\n\nIf there are no errors, you should get the output as:\n\n\nOutput\nCalling function GoodMorning() from package \ngreeting\n...\nGood Morning, Octallium!\n\nCalling function goodAfterNoon() from package \ngreeting\n...\nGood Afternoon, Octallium!\n\nCalling function GoodNight() from package \ngreeting\n...\nGood Night,  Gopher!\n\nFactorial of 10 is: 3628800.\n\n\n\n\nIf for some reason your code isn't working, checkout the github repo.\n\n\nGithub\n\n\nGithub Repo\n\n\nThat's it, \n Congratulations\n ! You just wrote your first custom package in Go.\n\n\nGolang Playground\n\n\nSince golang playground does not allow to declare and use custom packages, it is not possible to post it there, please refer the github repo for any errors.\n\n\nNext\n\n\nWe will start the basic data structures of type \n array\n.", 
            "title": "10 Packages"
        }, 
        {
            "location": "/basic/packages/#understanding-czjqqkd0-packagesczjqqkd1", 
            "text": "", 
            "title": "Understanding  Packages."
        }, 
        {
            "location": "/basic/packages/#objective", 
            "text": "To understand   packages  in Go.  You have already used packages, remember we imported \"fmt\" package and used Println() function in it.  Packages help us in organizing our code, we can group together related functions in a package. You can create multiple functions and files inside a package.  Note, that there can be only one   func main()  throughout your project, as main() is the starting point in any standalone application.", 
            "title": "Objective"
        }, 
        {
            "location": "/basic/packages/#structure", 
            "text": "Navigate to our code folder  code/basic/  For our program create a new folder '10_packages'  code/basic/10_packages/  And lets create a file 'main.go' in it, finally the structure would look like this:  code/basic/10_packages/main.go", 
            "title": "Structure"
        }, 
        {
            "location": "/basic/packages/#declaring-packages", 
            "text": "We will be creating a custom package called as \"greeting\" and have a couple of functions in it, but we first need to declare a package.  Navigate to our directory  code/basic/10_packages/  For declaring a package create a folder named \"greeting\", now the structure would be  code/basic/10_packages/greeting  Inside the \"greeting\" folder create a file \"greet.go\", we will write our functions inside \"greet.go\" and call it from main() as required.  code/basic/10_packages/greeting/greet.go  Now our structure would look like", 
            "title": "Declaring Packages"
        }, 
        {
            "location": "/basic/packages/#code", 
            "text": "A) First let us write the code for our custom package \"greeting\"  Open   greet.go  from:  code/basic/10_packages/greeting/greet.go  We will write the code in 4 parts:  1.)  Part-1 greet.go 1   package   greeting  2   3   // The above statement declares that this file belong to  4   // the package  greeting  5  6   // import other packages  7   import   fmt  8  9   // GoodMorning - Note that the name of our function starts with a capital alphabet,  10   // capital alphabet denotes that the function is exported or visible outside  11   // the package.  12   // Now you can understand why Println() has a capital letter in the beginning !  13   func   GoodMorning ()   {  14   fmt . Println ( Good Morning, Octallium! )  15   fmt . Println ()  16   }  17   Review  On line 1 we declare that this file belongs to the package \"greeting\", note that the package name and the parent directory name has to be the same.  package greeting  On line 13 we declare a function \"GoodMorning\" which prints out \"Good Morning, Octallium!\" on the screen  func GoodMorning()  Note that the first alphabet is capital, it symbolizes that the function is exported or visible to other packages, we will call it from our main().  2.)  Part-2 greet.go 18   // goodAfterNoon starts with a lowercase alphabet, means that this function is not  19   // exported, and can only be accessed within the package.  20   // Calling goodAfterNoon from another package will result in an error  21   func   goodAfterNoon ()   {  22   fmt . Println ( Good Afternoon, Octallium! )  23   fmt . Println ()  24   }  25  26   // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file,  27   // and hence it can call it.  28   func   CallGoodAfterNoon ()   {  29   goodAfterNoon ()  30   }  31   Review  On line 21 we declare a function \"goodAfterNoon\", but since the first alphabet is lowercase, the function is not exported, i.e it is not visible from other packages and can be accessed only within the file.  func goodAfterNoon()  In order to access it, on line 28 we create another function \"CallGoodAfterNoon\", it can access goodAfterNoon as it belongs to the same file and we can call goodAfterNoon() by calling CallGoodAfterNoon().  func CallGoodAfterNoon()  3.)  Part-3 greet.go 32   // GoodNight accepts a string parameter and prints the result to the screen  33   func   GoodNight ( name   string )   {  34   fmt . Println ( Good Night,  ,   name )  35   fmt . Println ()  36   }  37   Review  On line 33 we declare a function \"GoodNight\" which accepts a string and prints out a message. Note that the function doesn't return anything.  func GoodNight(name string)  4.)  Part-4 greet.go 38   // Factorial accepts an int parameter and also returns an int,  39   // it calculates the factorial of the input int and returns  40   // the factorial.  41   // At this point ignore how the function works, just concentrate  42   // on the declaration and syntax.  43   func   Factorial ( n   int )   int   {  44   if   n   ==   0   {  45    return   1  46   }  47   return   n   *   Factorial ( n - 1 )  48   }   Review  On line 43 we declare a function \"Factorial\" which accepts an int and also returns an int.  func Factorial(n int) int  At this point don't think how the function is working, let's concentrate on the declaration and syntax.  Complete greet.go package   greeting  // The above statement declares that this file belong to  // the package  greeting  // import other packages  import   fmt  // GoodMorning - Note that the name of our function starts with a capital alphabet,  // capital alphabet denotes that the function is exported or visible outside  // the package.  // Now you can understand why Println() has a capital letter in the beginning !  func   GoodMorning ()   { \n     fmt . Println ( Good Morning, Octallium! ) \n     fmt . Println ()  }  // goodAfterNoon starts with a lowercase alphabet, means that this function is not  // exported, and can only be accessed within the package.  // Calling goodAfterNoon from another package will result in an error  func   goodAfterNoon ()   { \n     fmt . Println ( Good Afternoon, Octallium! ) \n     fmt . Println ()  }  // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file,  // and hence it can call it.  func   CallGoodAfterNoon ()   { \n     goodAfterNoon ()  }  // GoodNight accepts a string parameter and prints the result to the screen  func   GoodNight ( name   string )   { \n     fmt . Println ( Good Night,  ,   name ) \n     fmt . Println ()  }  // Factorial accepts an int parameter and also returns an int,  // it calculates the factorial of the input int and returns  // the factorial.  // At this point ignore how the function works, just concentrate  // on the declaration and syntax.  func   Factorial ( n   int )   int   { \n     if   n   ==   0   { \n         return   1 \n     } \n     return   n   *   Factorial ( n - 1 )  }   B) Let's write the main.go  Navigate and open main.go from:  code/basic/10_packages/main.go  main.go 1   package   main  2  3   // The above declaration says that this file belongs to the  main  package  4  5   // importing our packages  6   import   (  7      // package  fmt  comes in-built as a part of Go standard library  8      fmt  9      // importing our custom package  10      ./greeting  11      // the  ./  denotes that from the current directory go to the  greeting  directory  12    )  13  14   func   main ()   {  15      // Calling the GoodMorning() from greeting package  16      fmt . Println ( Calling function GoodMorning() from package  greeting ... )  17      greeting . GoodMorning ()  18      // Calling the goodAfterNoon() from greeting package  19      fmt . Println ( Calling function goodAfterNoon() from package  greeting ... )  20      // as goodAfterNoon is not directly accessible, we call CallGoodAfterNoon()  21      // which in turn calls goodAfterNoon()  22      greeting . CallGoodAfterNoon ()  23      // Calling the GoodNight() from greeting package  24      fmt . Println ( Calling function GoodNight() from package  greeting ... )  25      greeting . GoodNight ( Gopher! )  26      // Calling the Factorial function with passing an int  27      num   :=   10  28      // As Factorial() returns an int, we save it in a new variable  result  29      result   :=   greeting . Factorial ( num )  30      // Printing the result on screen, note we are using Printf()  31      fmt . Printf ( Factorial of %d is: %d.\\n ,   num ,   result )  32   }   On line 1 we declare that the file belongs to the package \"main\"   package main  On line 10 we import our custom package \"greeting\"  ./greeting   The \"./\" denotes that from the current directory go to the \"greeting\" directory. On line 17 we call the GoodMorning function  greeting.GoodMorning()  Note the syntax  packageName.funcName  If we try to directly call goodAfterNoon() we will get an error  Error :   greeting . goodAfterNoon ()   So, we call it by calling the CallGoodAfterNoon() function on line 22.  greeting.CallGoodAfterNoon()  On line 25 we call the GoodNight() function and pass a string \"Gopher\" along with it.  greeting.GoodNight( Gopher! )  On line 29 we call the Factorial() function and pass an int, since it also returns an int, we save it in a variable \"result\" and print the output on line 31  result := greeting.Factorial(num)", 
            "title": "Code"
        }, 
        {
            "location": "/basic/packages/#running-your-code", 
            "text": "Open your terminal and navigate to our folder  code/basic/10_packages/  Once in the folder type the following command  go run main.go", 
            "title": "Running your code"
        }, 
        {
            "location": "/basic/packages/#build", 
            "text": "Till, now we have been running our code, let's try to build our code by compiling it to binary.  Instead of \"go run\" type the following command  go build main.go  If you are running on a unix based system including mac OSx, you can run the binary by typing  ./main  If there are no errors, you should get the output as:  Output Calling function GoodMorning() from package  greeting ...\nGood Morning, Octallium!\n\nCalling function goodAfterNoon() from package  greeting ...\nGood Afternoon, Octallium!\n\nCalling function GoodNight() from package  greeting ...\nGood Night,  Gopher!\n\nFactorial of 10 is: 3628800.  If for some reason your code isn't working, checkout the github repo.", 
            "title": "Build"
        }, 
        {
            "location": "/basic/packages/#github", 
            "text": "Github Repo  That's it,   Congratulations  ! You just wrote your first custom package in Go.", 
            "title": "Github"
        }, 
        {
            "location": "/basic/packages/#golang-playground", 
            "text": "Since golang playground does not allow to declare and use custom packages, it is not possible to post it there, please refer the github repo for any errors.", 
            "title": "Golang Playground"
        }, 
        {
            "location": "/basic/packages/#next", 
            "text": "We will start the basic data structures of type   array .", 
            "title": "Next"
        }
    ]
}